<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1270" onload="init(evt)" viewBox="0 0 1200 1270" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1270" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1253.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1253.00"> </text><svg id="frames" x="10" width="1180" total_samples="10204"><g><title>[[heap]] (3 samples, 0.03%)</title><rect x="0.0000%" y="1189" width="0.0294%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1199.50"></text></g><g><title>write (2 samples, 0.02%)</title><rect x="0.0098%" y="1173" width="0.0196%" height="15" fill="rgb(217,0,24)" fg:x="1" fg:w="2"/><text x="0.2598%" y="1183.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.0098%" y="1157" width="0.0196%" height="15" fill="rgb(221,193,54)" fg:x="1" fg:w="2"/><text x="0.2598%" y="1167.50"></text></g><g><title>[[stack]] (4 samples, 0.04%)</title><rect x="0.0294%" y="1189" width="0.0392%" height="15" fill="rgb(248,212,6)" fg:x="3" fg:w="4"/><text x="0.2794%" y="1199.50"></text></g><g><title>syscall (3 samples, 0.03%)</title><rect x="0.0392%" y="1173" width="0.0294%" height="15" fill="rgb(208,68,35)" fg:x="4" fg:w="3"/><text x="0.2892%" y="1183.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.0392%" y="1157" width="0.0294%" height="15" fill="rgb(232,128,0)" fg:x="4" fg:w="3"/><text x="0.2892%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0686%" y="1157" width="0.0196%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="2"/><text x="0.3186%" y="1167.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.0686%" y="1141" width="0.0196%" height="15" fill="rgb(228,23,34)" fg:x="7" fg:w="2"/><text x="0.3186%" y="1151.50"></text></g><g><title>[ld-linux-x86-64.so.2] (6 samples, 0.06%)</title><rect x="0.0686%" y="1173" width="0.0588%" height="15" fill="rgb(218,30,26)" fg:x="7" fg:w="6"/><text x="0.3186%" y="1183.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0882%" y="1157" width="0.0392%" height="15" fill="rgb(220,122,19)" fg:x="9" fg:w="4"/><text x="0.3382%" y="1167.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0882%" y="1141" width="0.0392%" height="15" fill="rgb(250,228,42)" fg:x="9" fg:w="4"/><text x="0.3382%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0882%" y="1125" width="0.0392%" height="15" fill="rgb(240,193,28)" fg:x="9" fg:w="4"/><text x="0.3382%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0882%" y="1109" width="0.0392%" height="15" fill="rgb(216,20,37)" fg:x="9" fg:w="4"/><text x="0.3382%" y="1119.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="0.0882%" y="1093" width="0.0392%" height="15" fill="rgb(206,188,39)" fg:x="9" fg:w="4"/><text x="0.3382%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.1078%" y="1077" width="0.0196%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="2"/><text x="0.3578%" y="1087.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.1078%" y="1061" width="0.0196%" height="15" fill="rgb(231,73,38)" fg:x="11" fg:w="2"/><text x="0.3578%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.1078%" y="1045" width="0.0196%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="2"/><text x="0.3578%" y="1055.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.1078%" y="1029" width="0.0196%" height="15" fill="rgb(210,31,41)" fg:x="11" fg:w="2"/><text x="0.3578%" y="1039.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.1078%" y="1013" width="0.0196%" height="15" fill="rgb(221,200,47)" fg:x="11" fg:w="2"/><text x="0.3578%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.1078%" y="997" width="0.0196%" height="15" fill="rgb(226,26,5)" fg:x="11" fg:w="2"/><text x="0.3578%" y="1007.50"></text></g><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.07%)</title><rect x="0.0686%" y="1189" width="0.0686%" height="15" fill="rgb(249,33,26)" fg:x="7" fg:w="7"/><text x="0.3186%" y="1199.50"></text></g><g><title>[libc.so.6] (6 samples, 0.06%)</title><rect x="0.1372%" y="1157" width="0.0588%" height="15" fill="rgb(235,183,28)" fg:x="14" fg:w="6"/><text x="0.3872%" y="1167.50"></text></g><g><title>snprintf (4 samples, 0.04%)</title><rect x="0.1568%" y="1141" width="0.0392%" height="15" fill="rgb(221,5,38)" fg:x="16" fg:w="4"/><text x="0.4068%" y="1151.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="0.1568%" y="1125" width="0.0392%" height="15" fill="rgb(247,18,42)" fg:x="16" fg:w="4"/><text x="0.4068%" y="1135.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="0.1568%" y="1109" width="0.0392%" height="15" fill="rgb(241,131,45)" fg:x="16" fg:w="4"/><text x="0.4068%" y="1119.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="0.1960%" y="1157" width="0.0980%" height="15" fill="rgb(249,31,29)" fg:x="20" fg:w="10"/><text x="0.4460%" y="1167.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.2450%" y="1141" width="0.0490%" height="15" fill="rgb(225,111,53)" fg:x="25" fg:w="5"/><text x="0.4950%" y="1151.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.2450%" y="1125" width="0.0490%" height="15" fill="rgb(238,160,17)" fg:x="25" fg:w="5"/><text x="0.4950%" y="1135.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.2646%" y="1109" width="0.0294%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="3"/><text x="0.5146%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.2744%" y="1093" width="0.0196%" height="15" fill="rgb(232,36,49)" fg:x="28" fg:w="2"/><text x="0.5244%" y="1103.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (3 samples, 0.03%)</title><rect x="0.3136%" y="1141" width="0.0294%" height="15" fill="rgb(209,103,24)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1151.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (3 samples, 0.03%)</title><rect x="0.3136%" y="1125" width="0.0294%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1135.50"></text></g><g><title>std::sys::unix::thread::Thread::set_name (3 samples, 0.03%)</title><rect x="0.3136%" y="1109" width="0.0294%" height="15" fill="rgb(213,181,19)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1119.50"></text></g><g><title>pthread_setname_np (3 samples, 0.03%)</title><rect x="0.3136%" y="1093" width="0.0294%" height="15" fill="rgb(254,191,54)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1103.50"></text></g><g><title>prctl (3 samples, 0.03%)</title><rect x="0.3136%" y="1077" width="0.0294%" height="15" fill="rgb(241,83,37)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.3136%" y="1061" width="0.0294%" height="15" fill="rgb(233,36,39)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.3136%" y="1045" width="0.0294%" height="15" fill="rgb(226,3,54)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.3136%" y="1029" width="0.0294%" height="15" fill="rgb(245,192,40)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.3136%" y="1013" width="0.0294%" height="15" fill="rgb(238,167,29)" fg:x="32" fg:w="3"/><text x="0.5636%" y="1023.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.3234%" y="997" width="0.0196%" height="15" fill="rgb(232,182,51)" fg:x="33" fg:w="2"/><text x="0.5734%" y="1007.50"></text></g><g><title>__mmap (14 samples, 0.14%)</title><rect x="0.3430%" y="1125" width="0.1372%" height="15" fill="rgb(231,60,39)" fg:x="35" fg:w="14"/><text x="0.5930%" y="1135.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.3430%" y="1109" width="0.1372%" height="15" fill="rgb(208,69,12)" fg:x="35" fg:w="14"/><text x="0.5930%" y="1119.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.3430%" y="1093" width="0.1372%" height="15" fill="rgb(235,93,37)" fg:x="35" fg:w="14"/><text x="0.5930%" y="1103.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.3430%" y="1077" width="0.1372%" height="15" fill="rgb(213,116,39)" fg:x="35" fg:w="14"/><text x="0.5930%" y="1087.50"></text></g><g><title>[unknown] (12 samples, 0.12%)</title><rect x="0.3626%" y="1061" width="0.1176%" height="15" fill="rgb(222,207,29)" fg:x="37" fg:w="12"/><text x="0.6126%" y="1071.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.3724%" y="1045" width="0.1078%" height="15" fill="rgb(206,96,30)" fg:x="38" fg:w="11"/><text x="0.6224%" y="1055.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.3724%" y="1029" width="0.1078%" height="15" fill="rgb(218,138,4)" fg:x="38" fg:w="11"/><text x="0.6224%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.4508%" y="1013" width="0.0294%" height="15" fill="rgb(250,191,14)" fg:x="46" fg:w="3"/><text x="0.7008%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.4508%" y="997" width="0.0294%" height="15" fill="rgb(239,60,40)" fg:x="46" fg:w="3"/><text x="0.7008%" y="1007.50"></text></g><g><title>__mprotect (8 samples, 0.08%)</title><rect x="0.4802%" y="1125" width="0.0784%" height="15" fill="rgb(206,27,48)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1135.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="0.4802%" y="1109" width="0.0784%" height="15" fill="rgb(225,35,8)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1119.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="0.4802%" y="1093" width="0.0784%" height="15" fill="rgb(250,213,24)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1103.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="0.4802%" y="1077" width="0.0784%" height="15" fill="rgb(247,123,22)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1087.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="0.4802%" y="1061" width="0.0784%" height="15" fill="rgb(231,138,38)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1071.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="0.4802%" y="1045" width="0.0784%" height="15" fill="rgb(231,145,46)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1055.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="0.4802%" y="1029" width="0.0784%" height="15" fill="rgb(251,118,11)" fg:x="49" fg:w="8"/><text x="0.7302%" y="1039.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="0.4998%" y="1013" width="0.0588%" height="15" fill="rgb(217,147,25)" fg:x="51" fg:w="6"/><text x="0.7498%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.5292%" y="997" width="0.0294%" height="15" fill="rgb(247,81,37)" fg:x="54" fg:w="3"/><text x="0.7792%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.5390%" y="981" width="0.0196%" height="15" fill="rgb(209,12,38)" fg:x="55" fg:w="2"/><text x="0.7890%" y="991.50"></text></g><g><title>[libc.so.6] (54 samples, 0.53%)</title><rect x="0.1372%" y="1189" width="0.5292%" height="15" fill="rgb(227,1,9)" fg:x="14" fg:w="54"/><text x="0.3872%" y="1199.50"></text></g><g><title>[libc.so.6] (54 samples, 0.53%)</title><rect x="0.1372%" y="1173" width="0.5292%" height="15" fill="rgb(248,47,43)" fg:x="14" fg:w="54"/><text x="0.3872%" y="1183.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (36 samples, 0.35%)</title><rect x="0.3136%" y="1157" width="0.3528%" height="15" fill="rgb(221,10,30)" fg:x="32" fg:w="36"/><text x="0.5636%" y="1167.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (33 samples, 0.32%)</title><rect x="0.3430%" y="1141" width="0.3234%" height="15" fill="rgb(210,229,1)" fg:x="35" fg:w="33"/><text x="0.5930%" y="1151.50"></text></g><g><title>sigaltstack (11 samples, 0.11%)</title><rect x="0.5586%" y="1125" width="0.1078%" height="15" fill="rgb(222,148,37)" fg:x="57" fg:w="11"/><text x="0.8086%" y="1135.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.5586%" y="1109" width="0.1078%" height="15" fill="rgb(234,67,33)" fg:x="57" fg:w="11"/><text x="0.8086%" y="1119.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.5586%" y="1093" width="0.1078%" height="15" fill="rgb(247,98,35)" fg:x="57" fg:w="11"/><text x="0.8086%" y="1103.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.5586%" y="1077" width="0.1078%" height="15" fill="rgb(247,138,52)" fg:x="57" fg:w="11"/><text x="0.8086%" y="1087.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.5586%" y="1061" width="0.1078%" height="15" fill="rgb(213,79,30)" fg:x="57" fg:w="11"/><text x="0.8086%" y="1071.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.6468%" y="1045" width="0.0196%" height="15" fill="rgb(246,177,23)" fg:x="66" fg:w="2"/><text x="0.8968%" y="1055.50"></text></g><g><title>[unknown] (20 samples, 0.20%)</title><rect x="0.6664%" y="1189" width="0.1960%" height="15" fill="rgb(230,62,27)" fg:x="68" fg:w="20"/><text x="0.9164%" y="1199.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.7252%" y="1173" width="0.1372%" height="15" fill="rgb(216,154,8)" fg:x="74" fg:w="14"/><text x="0.9752%" y="1183.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.7252%" y="1157" width="0.1372%" height="15" fill="rgb(244,35,45)" fg:x="74" fg:w="14"/><text x="0.9752%" y="1167.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.7252%" y="1141" width="0.1372%" height="15" fill="rgb(251,115,12)" fg:x="74" fg:w="14"/><text x="0.9752%" y="1151.50"></text></g><g><title>[unknown] (14 samples, 0.14%)</title><rect x="0.7252%" y="1125" width="0.1372%" height="15" fill="rgb(240,54,50)" fg:x="74" fg:w="14"/><text x="0.9752%" y="1135.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="0.7546%" y="1109" width="0.1078%" height="15" fill="rgb(233,84,52)" fg:x="77" fg:w="11"/><text x="1.0046%" y="1119.50"></text></g><g><title>[unknown] (10 samples, 0.10%)</title><rect x="0.7644%" y="1093" width="0.0980%" height="15" fill="rgb(207,117,47)" fg:x="78" fg:w="10"/><text x="1.0144%" y="1103.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="0.8036%" y="1077" width="0.0588%" height="15" fill="rgb(249,43,39)" fg:x="82" fg:w="6"/><text x="1.0536%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.8134%" y="1061" width="0.0490%" height="15" fill="rgb(209,38,44)" fg:x="83" fg:w="5"/><text x="1.0634%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="0.8134%" y="1045" width="0.0490%" height="15" fill="rgb(236,212,23)" fg:x="83" fg:w="5"/><text x="1.0634%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.8330%" y="1029" width="0.0294%" height="15" fill="rgb(242,79,21)" fg:x="85" fg:w="3"/><text x="1.0830%" y="1039.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::blocking::pool::BlockingPool&gt; (6 samples, 0.06%)</title><rect x="0.8722%" y="1045" width="0.0588%" height="15" fill="rgb(211,96,35)" fg:x="89" fg:w="6"/><text x="1.1222%" y="1055.50"></text></g><g><title>tokio::runtime::blocking::pool::BlockingPool::shutdown (6 samples, 0.06%)</title><rect x="0.8722%" y="1029" width="0.0588%" height="15" fill="rgb(253,215,40)" fg:x="89" fg:w="6"/><text x="1.1222%" y="1039.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (5 samples, 0.05%)</title><rect x="0.8820%" y="1013" width="0.0490%" height="15" fill="rgb(211,81,21)" fg:x="90" fg:w="5"/><text x="1.1320%" y="1023.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (5 samples, 0.05%)</title><rect x="0.8820%" y="997" width="0.0490%" height="15" fill="rgb(208,190,38)" fg:x="90" fg:w="5"/><text x="1.1320%" y="1007.50"></text></g><g><title>std::sys::unix::thread::Thread::join (5 samples, 0.05%)</title><rect x="0.8820%" y="981" width="0.0490%" height="15" fill="rgb(235,213,38)" fg:x="90" fg:w="5"/><text x="1.1320%" y="991.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="0.8918%" y="965" width="0.0392%" height="15" fill="rgb(237,122,38)" fg:x="91" fg:w="4"/><text x="1.1418%" y="975.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="0.9016%" y="949" width="0.0294%" height="15" fill="rgb(244,218,35)" fg:x="92" fg:w="3"/><text x="1.1516%" y="959.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="933" width="0.0196%" height="15" fill="rgb(240,68,47)" fg:x="93" fg:w="2"/><text x="1.1614%" y="943.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="917" width="0.0196%" height="15" fill="rgb(210,16,53)" fg:x="93" fg:w="2"/><text x="1.1614%" y="927.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="901" width="0.0196%" height="15" fill="rgb(235,124,12)" fg:x="93" fg:w="2"/><text x="1.1614%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="885" width="0.0196%" height="15" fill="rgb(224,169,11)" fg:x="93" fg:w="2"/><text x="1.1614%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="869" width="0.0196%" height="15" fill="rgb(250,166,2)" fg:x="93" fg:w="2"/><text x="1.1614%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="853" width="0.0196%" height="15" fill="rgb(242,216,29)" fg:x="93" fg:w="2"/><text x="1.1614%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.9114%" y="837" width="0.0196%" height="15" fill="rgb(230,116,27)" fg:x="93" fg:w="2"/><text x="1.1614%" y="847.50"></text></g><g><title>std::thread::Builder::spawn (5 samples, 0.05%)</title><rect x="0.9310%" y="901" width="0.0490%" height="15" fill="rgb(228,99,48)" fg:x="95" fg:w="5"/><text x="1.1810%" y="911.50"></text></g><g><title>std::thread::Builder::spawn_unchecked (5 samples, 0.05%)</title><rect x="0.9310%" y="885" width="0.0490%" height="15" fill="rgb(253,11,6)" fg:x="95" fg:w="5"/><text x="1.1810%" y="895.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_ (5 samples, 0.05%)</title><rect x="0.9310%" y="869" width="0.0490%" height="15" fill="rgb(247,143,39)" fg:x="95" fg:w="5"/><text x="1.1810%" y="879.50"></text></g><g><title>std::sys::unix::thread::Thread::new (4 samples, 0.04%)</title><rect x="0.9408%" y="853" width="0.0392%" height="15" fill="rgb(236,97,10)" fg:x="96" fg:w="4"/><text x="1.1908%" y="863.50"></text></g><g><title>pthread_create (2 samples, 0.02%)</title><rect x="0.9604%" y="837" width="0.0196%" height="15" fill="rgb(233,208,19)" fg:x="98" fg:w="2"/><text x="1.2104%" y="847.50"></text></g><g><title>tokio::runtime::builder::Builder::build (6 samples, 0.06%)</title><rect x="0.9310%" y="1045" width="0.0588%" height="15" fill="rgb(216,164,2)" fg:x="95" fg:w="6"/><text x="1.1810%" y="1055.50"></text></g><g><title>tokio::runtime::builder::Builder::build_threaded_runtime (6 samples, 0.06%)</title><rect x="0.9310%" y="1029" width="0.0588%" height="15" fill="rgb(220,129,5)" fg:x="95" fg:w="6"/><text x="1.1810%" y="1039.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch (6 samples, 0.06%)</title><rect x="0.9310%" y="1013" width="0.0588%" height="15" fill="rgb(242,17,10)" fg:x="95" fg:w="6"/><text x="1.1810%" y="1023.50"></text></g><g><title>tokio::runtime::blocking::pool::spawn_blocking (6 samples, 0.06%)</title><rect x="0.9310%" y="997" width="0.0588%" height="15" fill="rgb(242,107,0)" fg:x="95" fg:w="6"/><text x="1.1810%" y="1007.50"></text></g><g><title>tokio::runtime::handle::Handle::spawn_blocking (6 samples, 0.06%)</title><rect x="0.9310%" y="981" width="0.0588%" height="15" fill="rgb(251,28,31)" fg:x="95" fg:w="6"/><text x="1.1810%" y="991.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking (6 samples, 0.06%)</title><rect x="0.9310%" y="965" width="0.0588%" height="15" fill="rgb(233,223,10)" fg:x="95" fg:w="6"/><text x="1.1810%" y="975.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_blocking_inner (6 samples, 0.06%)</title><rect x="0.9310%" y="949" width="0.0588%" height="15" fill="rgb(215,21,27)" fg:x="95" fg:w="6"/><text x="1.1810%" y="959.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_task (6 samples, 0.06%)</title><rect x="0.9310%" y="933" width="0.0588%" height="15" fill="rgb(232,23,21)" fg:x="95" fg:w="6"/><text x="1.1810%" y="943.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread (6 samples, 0.06%)</title><rect x="0.9310%" y="917" width="0.0588%" height="15" fill="rgb(244,5,23)" fg:x="95" fg:w="6"/><text x="1.1810%" y="927.50"></text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="1.0486%" y="693" width="0.0294%" height="15" fill="rgb(226,81,46)" fg:x="107" fg:w="3"/><text x="1.2986%" y="703.50"></text></g><g><title>__rust_dealloc (2 samples, 0.02%)</title><rect x="1.0780%" y="693" width="0.0196%" height="15" fill="rgb(247,70,30)" fg:x="110" fg:w="2"/><text x="1.3280%" y="703.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (139 samples, 1.36%)</title><rect x="1.0486%" y="725" width="1.3622%" height="15" fill="rgb(212,68,19)" fg:x="107" fg:w="139"/><text x="1.2986%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (139 samples, 1.36%)</title><rect x="1.0486%" y="709" width="1.3622%" height="15" fill="rgb(240,187,13)" fg:x="107" fg:w="139"/><text x="1.2986%" y="719.50"></text></g><g><title>cfree (134 samples, 1.31%)</title><rect x="1.0976%" y="693" width="1.3132%" height="15" fill="rgb(223,113,26)" fg:x="112" fg:w="134"/><text x="1.3476%" y="703.50"></text></g><g><title>[libc.so.6] (107 samples, 1.05%)</title><rect x="1.3622%" y="677" width="1.0486%" height="15" fill="rgb(206,192,2)" fg:x="139" fg:w="107"/><text x="1.6122%" y="687.50"></text></g><g><title>[libc.so.6] (68 samples, 0.67%)</title><rect x="1.7444%" y="661" width="0.6664%" height="15" fill="rgb(241,108,4)" fg:x="178" fg:w="68"/><text x="1.9944%" y="671.50"></text></g><g><title>[libc.so.6] (42 samples, 0.41%)</title><rect x="1.9992%" y="645" width="0.4116%" height="15" fill="rgb(247,173,49)" fg:x="204" fg:w="42"/><text x="2.2492%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (142 samples, 1.39%)</title><rect x="1.0290%" y="821" width="1.3916%" height="15" fill="rgb(224,114,35)" fg:x="105" fg:w="142"/><text x="1.2790%" y="831.50"></text></g><g><title>core::ptr::drop_in_place&lt;[individual_creation::Individual]&gt; (142 samples, 1.39%)</title><rect x="1.0290%" y="805" width="1.3916%" height="15" fill="rgb(245,159,27)" fg:x="105" fg:w="142"/><text x="1.2790%" y="815.50"></text></g><g><title>core::ptr::drop_in_place&lt;individual_creation::Individual&gt; (140 samples, 1.37%)</title><rect x="1.0486%" y="789" width="1.3720%" height="15" fill="rgb(245,172,44)" fg:x="107" fg:w="140"/><text x="1.2986%" y="799.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;individual_creation::IndividualType&gt;&gt; (140 samples, 1.37%)</title><rect x="1.0486%" y="773" width="1.3720%" height="15" fill="rgb(236,23,11)" fg:x="107" fg:w="140"/><text x="1.2986%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;individual_creation::IndividualType&gt;&gt; (140 samples, 1.37%)</title><rect x="1.0486%" y="757" width="1.3720%" height="15" fill="rgb(205,117,38)" fg:x="107" fg:w="140"/><text x="1.2986%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (140 samples, 1.37%)</title><rect x="1.0486%" y="741" width="1.3720%" height="15" fill="rgb(237,72,25)" fg:x="107" fg:w="140"/><text x="1.2986%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;individual_creation::Population&gt; (145 samples, 1.42%)</title><rect x="1.0290%" y="853" width="1.4210%" height="15" fill="rgb(244,70,9)" fg:x="105" fg:w="145"/><text x="1.2790%" y="863.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;individual_creation::Individual&gt;&gt; (145 samples, 1.42%)</title><rect x="1.0290%" y="837" width="1.4210%" height="15" fill="rgb(217,125,39)" fg:x="105" fg:w="145"/><text x="1.2790%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;individual_creation::Individual&gt;&gt; (3 samples, 0.03%)</title><rect x="2.4206%" y="821" width="0.0294%" height="15" fill="rgb(235,36,10)" fg:x="247" fg:w="3"/><text x="2.6706%" y="831.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 0.03%)</title><rect x="2.4206%" y="805" width="0.0294%" height="15" fill="rgb(251,123,47)" fg:x="247" fg:w="3"/><text x="2.6706%" y="815.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 0.03%)</title><rect x="2.4206%" y="789" width="0.0294%" height="15" fill="rgb(221,13,13)" fg:x="247" fg:w="3"/><text x="2.6706%" y="799.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 0.03%)</title><rect x="2.4206%" y="773" width="0.0294%" height="15" fill="rgb(238,131,9)" fg:x="247" fg:w="3"/><text x="2.6706%" y="783.50"></text></g><g><title>cfree (3 samples, 0.03%)</title><rect x="2.4206%" y="757" width="0.0294%" height="15" fill="rgb(211,50,8)" fg:x="247" fg:w="3"/><text x="2.6706%" y="767.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="2.4304%" y="741" width="0.0196%" height="15" fill="rgb(245,182,24)" fg:x="248" fg:w="2"/><text x="2.6804%" y="751.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (28 samples, 0.27%)</title><rect x="4.2434%" y="597" width="0.2744%" height="15" fill="rgb(242,14,37)" fg:x="433" fg:w="28"/><text x="4.4934%" y="607.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (28 samples, 0.27%)</title><rect x="4.2434%" y="581" width="0.2744%" height="15" fill="rgb(246,228,12)" fg:x="433" fg:w="28"/><text x="4.4934%" y="591.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (28 samples, 0.27%)</title><rect x="4.2434%" y="565" width="0.2744%" height="15" fill="rgb(213,55,15)" fg:x="433" fg:w="28"/><text x="4.4934%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (8 samples, 0.08%)</title><rect x="4.5178%" y="597" width="0.0784%" height="15" fill="rgb(209,9,3)" fg:x="461" fg:w="8"/><text x="4.7678%" y="607.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (8 samples, 0.08%)</title><rect x="4.5178%" y="581" width="0.0784%" height="15" fill="rgb(230,59,30)" fg:x="461" fg:w="8"/><text x="4.7678%" y="591.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.08%)</title><rect x="4.5178%" y="565" width="0.0784%" height="15" fill="rgb(209,121,21)" fg:x="461" fg:w="8"/><text x="4.7678%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (110 samples, 1.08%)</title><rect x="4.6158%" y="517" width="1.0780%" height="15" fill="rgb(220,109,13)" fg:x="471" fg:w="110"/><text x="4.8658%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (110 samples, 1.08%)</title><rect x="4.6158%" y="501" width="1.0780%" height="15" fill="rgb(232,18,1)" fg:x="471" fg:w="110"/><text x="4.8658%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (110 samples, 1.08%)</title><rect x="4.6158%" y="485" width="1.0780%" height="15" fill="rgb(215,41,42)" fg:x="471" fg:w="110"/><text x="4.8658%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (108 samples, 1.06%)</title><rect x="4.6354%" y="469" width="1.0584%" height="15" fill="rgb(224,123,36)" fg:x="473" fg:w="108"/><text x="4.8854%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (108 samples, 1.06%)</title><rect x="4.6354%" y="453" width="1.0584%" height="15" fill="rgb(240,125,3)" fg:x="473" fg:w="108"/><text x="4.8854%" y="463.50"></text></g><g><title>alloc::alloc::alloc (108 samples, 1.06%)</title><rect x="4.6354%" y="437" width="1.0584%" height="15" fill="rgb(205,98,50)" fg:x="473" fg:w="108"/><text x="4.8854%" y="447.50"></text></g><g><title>malloc (105 samples, 1.03%)</title><rect x="4.6648%" y="421" width="1.0290%" height="15" fill="rgb(205,185,37)" fg:x="476" fg:w="105"/><text x="4.9148%" y="431.50"></text></g><g><title>[libc.so.6] (84 samples, 0.82%)</title><rect x="4.8706%" y="405" width="0.8232%" height="15" fill="rgb(238,207,15)" fg:x="497" fg:w="84"/><text x="5.1206%" y="415.50"></text></g><g><title>[libc.so.6] (18 samples, 0.18%)</title><rect x="5.5174%" y="389" width="0.1764%" height="15" fill="rgb(213,199,42)" fg:x="563" fg:w="18"/><text x="5.7674%" y="399.50"></text></g><g><title>&lt;individual_creation::Individual as core::clone::Clone&gt;::clone (278 samples, 2.72%)</title><rect x="4.5962%" y="597" width="2.7244%" height="15" fill="rgb(235,201,11)" fg:x="469" fg:w="278"/><text x="4.8462%" y="607.50">&lt;i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (278 samples, 2.72%)</title><rect x="4.5962%" y="581" width="2.7244%" height="15" fill="rgb(207,46,11)" fg:x="469" fg:w="278"/><text x="4.8462%" y="591.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (277 samples, 2.71%)</title><rect x="4.6060%" y="565" width="2.7146%" height="15" fill="rgb(241,35,35)" fg:x="470" fg:w="277"/><text x="4.8560%" y="575.50">al..</text></g><g><title>alloc::slice::hack::to_vec (277 samples, 2.71%)</title><rect x="4.6060%" y="549" width="2.7146%" height="15" fill="rgb(243,32,47)" fg:x="470" fg:w="277"/><text x="4.8560%" y="559.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (277 samples, 2.71%)</title><rect x="4.6060%" y="533" width="2.7146%" height="15" fill="rgb(247,202,23)" fg:x="470" fg:w="277"/><text x="4.8560%" y="543.50">&lt;T..</text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (166 samples, 1.63%)</title><rect x="5.6938%" y="517" width="1.6268%" height="15" fill="rgb(219,102,11)" fg:x="581" fg:w="166"/><text x="5.9438%" y="527.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (166 samples, 1.63%)</title><rect x="5.6938%" y="501" width="1.6268%" height="15" fill="rgb(243,110,44)" fg:x="581" fg:w="166"/><text x="5.9438%" y="511.50"></text></g><g><title>[libc.so.6] (163 samples, 1.60%)</title><rect x="5.7232%" y="485" width="1.5974%" height="15" fill="rgb(222,74,54)" fg:x="584" fg:w="163"/><text x="5.9732%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (18 samples, 0.18%)</title><rect x="7.3207%" y="597" width="0.1764%" height="15" fill="rgb(216,99,12)" fg:x="747" fg:w="18"/><text x="7.5707%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (18 samples, 0.18%)</title><rect x="7.3207%" y="581" width="0.1764%" height="15" fill="rgb(226,22,26)" fg:x="747" fg:w="18"/><text x="7.5707%" y="591.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (18 samples, 0.18%)</title><rect x="7.3207%" y="565" width="0.1764%" height="15" fill="rgb(217,163,10)" fg:x="747" fg:w="18"/><text x="7.5707%" y="575.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (4 samples, 0.04%)</title><rect x="7.5069%" y="453" width="0.0392%" height="15" fill="rgb(213,25,53)" fg:x="766" fg:w="4"/><text x="7.7569%" y="463.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (4 samples, 0.04%)</title><rect x="7.5069%" y="437" width="0.0392%" height="15" fill="rgb(252,105,26)" fg:x="766" fg:w="4"/><text x="7.7569%" y="447.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (4 samples, 0.04%)</title><rect x="7.5069%" y="421" width="0.0392%" height="15" fill="rgb(220,39,43)" fg:x="766" fg:w="4"/><text x="7.7569%" y="431.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (4 samples, 0.04%)</title><rect x="7.5069%" y="405" width="0.0392%" height="15" fill="rgb(229,68,48)" fg:x="766" fg:w="4"/><text x="7.7569%" y="415.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (4 samples, 0.04%)</title><rect x="7.5069%" y="389" width="0.0392%" height="15" fill="rgb(252,8,32)" fg:x="766" fg:w="4"/><text x="7.7569%" y="399.50"></text></g><g><title>rand_chacha::guts::round (3 samples, 0.03%)</title><rect x="7.5167%" y="373" width="0.0294%" height="15" fill="rgb(223,20,43)" fg:x="767" fg:w="3"/><text x="7.7667%" y="383.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.06%)</title><rect x="7.4971%" y="597" width="0.0588%" height="15" fill="rgb(229,81,49)" fg:x="765" fg:w="6"/><text x="7.7471%" y="607.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.06%)</title><rect x="7.4971%" y="581" width="0.0588%" height="15" fill="rgb(236,28,36)" fg:x="765" fg:w="6"/><text x="7.7471%" y="591.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.06%)</title><rect x="7.4971%" y="565" width="0.0588%" height="15" fill="rgb(249,185,26)" fg:x="765" fg:w="6"/><text x="7.7471%" y="575.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.06%)</title><rect x="7.4971%" y="549" width="0.0588%" height="15" fill="rgb(249,174,33)" fg:x="765" fg:w="6"/><text x="7.7471%" y="559.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="7.4971%" y="533" width="0.0588%" height="15" fill="rgb(233,201,37)" fg:x="765" fg:w="6"/><text x="7.7471%" y="543.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="7.4971%" y="517" width="0.0588%" height="15" fill="rgb(221,78,26)" fg:x="765" fg:w="6"/><text x="7.7471%" y="527.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (6 samples, 0.06%)</title><rect x="7.4971%" y="501" width="0.0588%" height="15" fill="rgb(250,127,30)" fg:x="765" fg:w="6"/><text x="7.7471%" y="511.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (5 samples, 0.05%)</title><rect x="7.5069%" y="485" width="0.0490%" height="15" fill="rgb(230,49,44)" fg:x="766" fg:w="5"/><text x="7.7569%" y="495.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.05%)</title><rect x="7.5069%" y="469" width="0.0490%" height="15" fill="rgb(229,67,23)" fg:x="766" fg:w="5"/><text x="7.7569%" y="479.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (2 samples, 0.02%)</title><rect x="7.5853%" y="453" width="0.0196%" height="15" fill="rgb(249,83,47)" fg:x="774" fg:w="2"/><text x="7.8353%" y="463.50"></text></g><g><title>rand::rng::Rng::gen_range (10 samples, 0.10%)</title><rect x="7.5559%" y="597" width="0.0980%" height="15" fill="rgb(215,43,3)" fg:x="771" fg:w="10"/><text x="7.8059%" y="607.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (10 samples, 0.10%)</title><rect x="7.5559%" y="581" width="0.0980%" height="15" fill="rgb(238,154,13)" fg:x="771" fg:w="10"/><text x="7.8059%" y="591.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (10 samples, 0.10%)</title><rect x="7.5559%" y="565" width="0.0980%" height="15" fill="rgb(219,56,2)" fg:x="771" fg:w="10"/><text x="7.8059%" y="575.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (10 samples, 0.10%)</title><rect x="7.5559%" y="549" width="0.0980%" height="15" fill="rgb(233,0,4)" fg:x="771" fg:w="10"/><text x="7.8059%" y="559.50"></text></g><g><title>rand::rng::Rng::gen (9 samples, 0.09%)</title><rect x="7.5657%" y="533" width="0.0882%" height="15" fill="rgb(235,30,7)" fg:x="772" fg:w="9"/><text x="7.8157%" y="543.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (7 samples, 0.07%)</title><rect x="7.5853%" y="517" width="0.0686%" height="15" fill="rgb(250,79,13)" fg:x="774" fg:w="7"/><text x="7.8353%" y="527.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (7 samples, 0.07%)</title><rect x="7.5853%" y="501" width="0.0686%" height="15" fill="rgb(211,146,34)" fg:x="774" fg:w="7"/><text x="7.8353%" y="511.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (7 samples, 0.07%)</title><rect x="7.5853%" y="485" width="0.0686%" height="15" fill="rgb(228,22,38)" fg:x="774" fg:w="7"/><text x="7.8353%" y="495.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (7 samples, 0.07%)</title><rect x="7.5853%" y="469" width="0.0686%" height="15" fill="rgb(235,168,5)" fg:x="774" fg:w="7"/><text x="7.8353%" y="479.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (5 samples, 0.05%)</title><rect x="7.6049%" y="453" width="0.0490%" height="15" fill="rgb(221,155,16)" fg:x="776" fg:w="5"/><text x="7.8549%" y="463.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (5 samples, 0.05%)</title><rect x="7.6049%" y="437" width="0.0490%" height="15" fill="rgb(215,215,53)" fg:x="776" fg:w="5"/><text x="7.8549%" y="447.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (4 samples, 0.04%)</title><rect x="7.6147%" y="421" width="0.0392%" height="15" fill="rgb(223,4,10)" fg:x="777" fg:w="4"/><text x="7.8647%" y="431.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (4 samples, 0.04%)</title><rect x="7.6147%" y="405" width="0.0392%" height="15" fill="rgb(234,103,6)" fg:x="777" fg:w="4"/><text x="7.8647%" y="415.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (3 samples, 0.03%)</title><rect x="7.6245%" y="389" width="0.0294%" height="15" fill="rgb(227,97,0)" fg:x="778" fg:w="3"/><text x="7.8745%" y="399.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (3 samples, 0.03%)</title><rect x="7.6245%" y="373" width="0.0294%" height="15" fill="rgb(234,150,53)" fg:x="778" fg:w="3"/><text x="7.8745%" y="383.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (3 samples, 0.03%)</title><rect x="7.6245%" y="357" width="0.0294%" height="15" fill="rgb(228,201,54)" fg:x="778" fg:w="3"/><text x="7.8745%" y="367.50"></text></g><g><title>rand_chacha::guts::round (3 samples, 0.03%)</title><rect x="7.6245%" y="341" width="0.0294%" height="15" fill="rgb(222,22,37)" fg:x="778" fg:w="3"/><text x="7.8745%" y="351.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (2 samples, 0.02%)</title><rect x="7.6343%" y="325" width="0.0196%" height="15" fill="rgb(237,53,32)" fg:x="779" fg:w="2"/><text x="7.8843%" y="335.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (2 samples, 0.02%)</title><rect x="7.6343%" y="309" width="0.0196%" height="15" fill="rgb(233,25,53)" fg:x="779" fg:w="2"/><text x="7.8843%" y="319.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (2 samples, 0.02%)</title><rect x="7.6343%" y="293" width="0.0196%" height="15" fill="rgb(210,40,34)" fg:x="779" fg:w="2"/><text x="7.8843%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (493 samples, 4.83%)</title><rect x="2.8322%" y="661" width="4.8314%" height="15" fill="rgb(241,220,44)" fg:x="289" fg:w="493"/><text x="3.0822%" y="671.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (492 samples, 4.82%)</title><rect x="2.8420%" y="645" width="4.8216%" height="15" fill="rgb(235,28,35)" fg:x="290" fg:w="492"/><text x="3.0920%" y="655.50">core::..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (481 samples, 4.71%)</title><rect x="2.9498%" y="629" width="4.7138%" height="15" fill="rgb(210,56,17)" fg:x="301" fg:w="481"/><text x="3.1998%" y="639.50">core:..</text></g><g><title>genetic_algorithm::GA::crossover::_{{closure}} (478 samples, 4.68%)</title><rect x="2.9792%" y="613" width="4.6844%" height="15" fill="rgb(224,130,29)" fg:x="304" fg:w="478"/><text x="3.2292%" y="623.50">genet..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (511 samples, 5.01%)</title><rect x="2.8322%" y="709" width="5.0078%" height="15" fill="rgb(235,212,8)" fg:x="289" fg:w="511"/><text x="3.0822%" y="719.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (511 samples, 5.01%)</title><rect x="2.8322%" y="693" width="5.0078%" height="15" fill="rgb(223,33,50)" fg:x="289" fg:w="511"/><text x="3.0822%" y="703.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (511 samples, 5.01%)</title><rect x="2.8322%" y="677" width="5.0078%" height="15" fill="rgb(219,149,13)" fg:x="289" fg:w="511"/><text x="3.0822%" y="687.50">&lt;core:..</text></g><g><title>core::option::Option&lt;T&gt;::map (18 samples, 0.18%)</title><rect x="7.6637%" y="661" width="0.1764%" height="15" fill="rgb(250,156,29)" fg:x="782" fg:w="18"/><text x="7.9137%" y="671.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 0.06%)</title><rect x="7.7813%" y="645" width="0.0588%" height="15" fill="rgb(216,193,19)" fg:x="794" fg:w="6"/><text x="8.0313%" y="655.50"></text></g><g><title>genetic_algorithm::GA::crossover::_{{closure}} (6 samples, 0.06%)</title><rect x="7.7813%" y="629" width="0.0588%" height="15" fill="rgb(216,135,14)" fg:x="794" fg:w="6"/><text x="8.0313%" y="639.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.03%)</title><rect x="7.8401%" y="693" width="0.0294%" height="15" fill="rgb(241,47,5)" fg:x="800" fg:w="3"/><text x="8.0901%" y="703.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.03%)</title><rect x="7.8401%" y="677" width="0.0294%" height="15" fill="rgb(233,42,35)" fg:x="800" fg:w="3"/><text x="8.0901%" y="687.50"></text></g><g><title>core::option::Option&lt;T&gt;::or_else (2 samples, 0.02%)</title><rect x="7.8499%" y="661" width="0.0196%" height="15" fill="rgb(231,13,6)" fg:x="801" fg:w="2"/><text x="8.0999%" y="671.50"></text></g><g><title>&lt;core::iter::adapters::chain::Chain&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next::_{{closure}} (2 samples, 0.02%)</title><rect x="7.8499%" y="645" width="0.0196%" height="15" fill="rgb(207,181,40)" fg:x="801" fg:w="2"/><text x="8.0999%" y="655.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_none (3 samples, 0.03%)</title><rect x="7.8695%" y="693" width="0.0294%" height="15" fill="rgb(254,173,49)" fg:x="803" fg:w="3"/><text x="8.1195%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (3 samples, 0.03%)</title><rect x="7.8695%" y="677" width="0.0294%" height="15" fill="rgb(221,1,38)" fg:x="803" fg:w="3"/><text x="8.1195%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (530 samples, 5.19%)</title><rect x="2.7244%" y="741" width="5.1940%" height="15" fill="rgb(206,124,46)" fg:x="278" fg:w="530"/><text x="2.9744%" y="751.50">&lt;core:..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (527 samples, 5.16%)</title><rect x="2.7538%" y="725" width="5.1646%" height="15" fill="rgb(249,21,11)" fg:x="281" fg:w="527"/><text x="3.0038%" y="735.50">&lt;core:..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (8 samples, 0.08%)</title><rect x="7.8401%" y="709" width="0.0784%" height="15" fill="rgb(222,201,40)" fg:x="800" fg:w="8"/><text x="8.0901%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::adapters::chain::Chain&lt;core::iter::sources::once::Once&lt;individual_creation::Individual&gt;,core::iter::sources::once::Once&lt;individual_creation::Individual&gt;&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="7.8989%" y="693" width="0.0196%" height="15" fill="rgb(235,61,29)" fg:x="806" fg:w="2"/><text x="8.1489%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::iter::adapters::chain::Chain&lt;core::iter::sources::once::Once&lt;individual_creation::Individual&gt;,core::iter::sources::once::Once&lt;individual_creation::Individual&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="7.8989%" y="677" width="0.0196%" height="15" fill="rgb(219,207,3)" fg:x="806" fg:w="2"/><text x="8.1489%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;core::iter::sources::once::Once&lt;individual_creation::Individual&gt;&gt;&gt; (2 samples, 0.02%)</title><rect x="7.8989%" y="661" width="0.0196%" height="15" fill="rgb(222,56,46)" fg:x="806" fg:w="2"/><text x="8.1489%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (21 samples, 0.21%)</title><rect x="7.9479%" y="661" width="0.2058%" height="15" fill="rgb(239,76,54)" fg:x="811" fg:w="21"/><text x="8.1979%" y="671.50"></text></g><g><title>alloc::alloc::Global::grow_impl (21 samples, 0.21%)</title><rect x="7.9479%" y="645" width="0.2058%" height="15" fill="rgb(231,124,27)" fg:x="811" fg:w="21"/><text x="8.1979%" y="655.50"></text></g><g><title>alloc::alloc::realloc (21 samples, 0.21%)</title><rect x="7.9479%" y="629" width="0.2058%" height="15" fill="rgb(249,195,6)" fg:x="811" fg:w="21"/><text x="8.1979%" y="639.50"></text></g><g><title>realloc (21 samples, 0.21%)</title><rect x="7.9479%" y="613" width="0.2058%" height="15" fill="rgb(237,174,47)" fg:x="811" fg:w="21"/><text x="8.1979%" y="623.50"></text></g><g><title>[libc.so.6] (19 samples, 0.19%)</title><rect x="7.9675%" y="597" width="0.1862%" height="15" fill="rgb(206,201,31)" fg:x="813" fg:w="19"/><text x="8.2175%" y="607.50"></text></g><g><title>[libc.so.6] (16 samples, 0.16%)</title><rect x="7.9969%" y="581" width="0.1568%" height="15" fill="rgb(231,57,52)" fg:x="816" fg:w="16"/><text x="8.2469%" y="591.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="8.1341%" y="565" width="0.0196%" height="15" fill="rgb(248,177,22)" fg:x="830" fg:w="2"/><text x="8.3841%" y="575.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (24 samples, 0.24%)</title><rect x="7.9283%" y="741" width="0.2352%" height="15" fill="rgb(215,211,37)" fg:x="809" fg:w="24"/><text x="8.1783%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (24 samples, 0.24%)</title><rect x="7.9283%" y="725" width="0.2352%" height="15" fill="rgb(241,128,51)" fg:x="809" fg:w="24"/><text x="8.1783%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (24 samples, 0.24%)</title><rect x="7.9283%" y="709" width="0.2352%" height="15" fill="rgb(227,165,31)" fg:x="809" fg:w="24"/><text x="8.1783%" y="719.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (24 samples, 0.24%)</title><rect x="7.9283%" y="693" width="0.2352%" height="15" fill="rgb(228,167,24)" fg:x="809" fg:w="24"/><text x="8.1783%" y="703.50"></text></g><g><title>alloc::raw_vec::finish_grow (23 samples, 0.23%)</title><rect x="7.9381%" y="677" width="0.2254%" height="15" fill="rgb(228,143,12)" fg:x="810" fg:w="23"/><text x="8.1881%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (587 samples, 5.75%)</title><rect x="2.4696%" y="773" width="5.7526%" height="15" fill="rgb(249,149,8)" fg:x="252" fg:w="587"/><text x="2.7196%" y="783.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (587 samples, 5.75%)</title><rect x="2.4696%" y="757" width="5.7526%" height="15" fill="rgb(243,35,44)" fg:x="252" fg:w="587"/><text x="2.7196%" y="767.50">alloc::..</text></g><g><title>core::ptr::write (6 samples, 0.06%)</title><rect x="8.1635%" y="741" width="0.0588%" height="15" fill="rgb(246,89,9)" fg:x="833" fg:w="6"/><text x="8.4135%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="8.2223%" y="773" width="0.0882%" height="15" fill="rgb(233,213,13)" fg:x="839" fg:w="9"/><text x="8.4723%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.09%)</title><rect x="8.2223%" y="757" width="0.0882%" height="15" fill="rgb(233,141,41)" fg:x="839" fg:w="9"/><text x="8.4723%" y="767.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="8.2419%" y="741" width="0.0686%" height="15" fill="rgb(239,167,4)" fg:x="841" fg:w="7"/><text x="8.4919%" y="751.50"></text></g><g><title>&lt;core::iter::adapters::fuse::Fuse&lt;I&gt; as core::iter::adapters::fuse::FuseImpl&lt;I&gt;&gt;::next (7 samples, 0.07%)</title><rect x="8.2419%" y="725" width="0.0686%" height="15" fill="rgb(209,217,16)" fg:x="841" fg:w="7"/><text x="8.4919%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="8.2419%" y="709" width="0.0686%" height="15" fill="rgb(219,88,35)" fg:x="841" fg:w="7"/><text x="8.4919%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.07%)</title><rect x="8.2419%" y="693" width="0.0686%" height="15" fill="rgb(220,193,23)" fg:x="841" fg:w="7"/><text x="8.4919%" y="703.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (7 samples, 0.07%)</title><rect x="8.2419%" y="677" width="0.0686%" height="15" fill="rgb(230,90,52)" fg:x="841" fg:w="7"/><text x="8.4919%" y="687.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (6 samples, 0.06%)</title><rect x="8.2517%" y="661" width="0.0588%" height="15" fill="rgb(252,106,19)" fg:x="842" fg:w="6"/><text x="8.5017%" y="671.50"></text></g><g><title>genetic_algorithm::GA::crossover::_{{closure}} (6 samples, 0.06%)</title><rect x="8.2517%" y="645" width="0.0588%" height="15" fill="rgb(206,74,20)" fg:x="842" fg:w="6"/><text x="8.5017%" y="655.50"></text></g><g><title>&lt;individual_creation::Individual as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="8.2615%" y="629" width="0.0490%" height="15" fill="rgb(230,138,44)" fg:x="843" fg:w="5"/><text x="8.5115%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (5 samples, 0.05%)</title><rect x="8.2615%" y="613" width="0.0490%" height="15" fill="rgb(235,182,43)" fg:x="843" fg:w="5"/><text x="8.5115%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (5 samples, 0.05%)</title><rect x="8.2615%" y="597" width="0.0490%" height="15" fill="rgb(242,16,51)" fg:x="843" fg:w="5"/><text x="8.5115%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (5 samples, 0.05%)</title><rect x="8.2615%" y="581" width="0.0490%" height="15" fill="rgb(248,9,4)" fg:x="843" fg:w="5"/><text x="8.5115%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (5 samples, 0.05%)</title><rect x="8.2615%" y="565" width="0.0490%" height="15" fill="rgb(210,31,22)" fg:x="843" fg:w="5"/><text x="8.5115%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (4 samples, 0.04%)</title><rect x="8.2713%" y="549" width="0.0392%" height="15" fill="rgb(239,54,39)" fg:x="844" fg:w="4"/><text x="8.5213%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.04%)</title><rect x="8.2713%" y="533" width="0.0392%" height="15" fill="rgb(230,99,41)" fg:x="844" fg:w="4"/><text x="8.5213%" y="543.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="8.2713%" y="517" width="0.0392%" height="15" fill="rgb(253,106,12)" fg:x="844" fg:w="4"/><text x="8.5213%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (598 samples, 5.86%)</title><rect x="2.4598%" y="837" width="5.8604%" height="15" fill="rgb(213,46,41)" fg:x="251" fg:w="598"/><text x="2.7098%" y="847.50">core::i..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (598 samples, 5.86%)</title><rect x="2.4598%" y="821" width="5.8604%" height="15" fill="rgb(215,133,35)" fg:x="251" fg:w="598"/><text x="2.7098%" y="831.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (598 samples, 5.86%)</title><rect x="2.4598%" y="805" width="5.8604%" height="15" fill="rgb(213,28,5)" fg:x="251" fg:w="598"/><text x="2.7098%" y="815.50">&lt;alloc:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (598 samples, 5.86%)</title><rect x="2.4598%" y="789" width="5.8604%" height="15" fill="rgb(215,77,49)" fg:x="251" fg:w="598"/><text x="2.7098%" y="799.50">&lt;alloc:..</text></g><g><title>genetic_algorithm::GA::crossover (600 samples, 5.88%)</title><rect x="2.4500%" y="853" width="5.8800%" height="15" fill="rgb(248,100,22)" fg:x="250" fg:w="600"/><text x="2.7000%" y="863.50">genetic..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (2 samples, 0.02%)</title><rect x="8.3301%" y="645" width="0.0196%" height="15" fill="rgb(208,67,9)" fg:x="850" fg:w="2"/><text x="8.5801%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (2 samples, 0.02%)</title><rect x="8.3301%" y="629" width="0.0196%" height="15" fill="rgb(219,133,21)" fg:x="850" fg:w="2"/><text x="8.5801%" y="639.50"></text></g><g><title>core::ptr::write (2 samples, 0.02%)</title><rect x="8.3301%" y="613" width="0.0196%" height="15" fill="rgb(246,46,29)" fg:x="850" fg:w="2"/><text x="8.5801%" y="623.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::decode::_{{closure}} (68 samples, 0.67%)</title><rect x="8.6437%" y="437" width="0.6664%" height="15" fill="rgb(246,185,52)" fg:x="882" fg:w="68"/><text x="8.8937%" y="447.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for f64&gt;::from (42 samples, 0.41%)</title><rect x="8.8985%" y="421" width="0.4116%" height="15" fill="rgb(252,136,11)" fg:x="908" fg:w="42"/><text x="9.1485%" y="431.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (68 samples, 0.67%)</title><rect x="9.3101%" y="405" width="0.6664%" height="15" fill="rgb(219,138,53)" fg:x="950" fg:w="68"/><text x="9.5601%" y="415.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (248 samples, 2.43%)</title><rect x="8.5457%" y="533" width="2.4304%" height="15" fill="rgb(211,51,23)" fg:x="872" fg:w="248"/><text x="8.7957%" y="543.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (248 samples, 2.43%)</title><rect x="8.5457%" y="517" width="2.4304%" height="15" fill="rgb(247,221,28)" fg:x="872" fg:w="248"/><text x="8.7957%" y="527.50">al..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (248 samples, 2.43%)</title><rect x="8.5457%" y="501" width="2.4304%" height="15" fill="rgb(251,222,45)" fg:x="872" fg:w="248"/><text x="8.7957%" y="511.50">co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (248 samples, 2.43%)</title><rect x="8.5457%" y="485" width="2.4304%" height="15" fill="rgb(217,162,53)" fg:x="872" fg:w="248"/><text x="8.7957%" y="495.50">&lt;c..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (248 samples, 2.43%)</title><rect x="8.5457%" y="469" width="2.4304%" height="15" fill="rgb(229,93,14)" fg:x="872" fg:w="248"/><text x="8.7957%" y="479.50">&lt;c..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (238 samples, 2.33%)</title><rect x="8.6437%" y="453" width="2.3324%" height="15" fill="rgb(209,67,49)" fg:x="882" fg:w="238"/><text x="8.8937%" y="463.50">c..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (170 samples, 1.67%)</title><rect x="9.3101%" y="437" width="1.6660%" height="15" fill="rgb(213,87,29)" fg:x="950" fg:w="170"/><text x="9.5601%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (170 samples, 1.67%)</title><rect x="9.3101%" y="421" width="1.6660%" height="15" fill="rgb(205,151,52)" fg:x="950" fg:w="170"/><text x="9.5601%" y="431.50"></text></g><g><title>core::ptr::write (102 samples, 1.00%)</title><rect x="9.9765%" y="405" width="0.9996%" height="15" fill="rgb(253,215,39)" fg:x="1018" fg:w="102"/><text x="10.2265%" y="415.50"></text></g><g><title>__rust_alloc (3 samples, 0.03%)</title><rect x="11.0349%" y="421" width="0.0294%" height="15" fill="rgb(221,220,41)" fg:x="1126" fg:w="3"/><text x="11.2849%" y="431.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::decode (276 samples, 2.70%)</title><rect x="8.4575%" y="613" width="2.7048%" height="15" fill="rgb(218,133,21)" fg:x="863" fg:w="276"/><text x="8.7075%" y="623.50">&lt;p..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (276 samples, 2.70%)</title><rect x="8.4575%" y="597" width="2.7048%" height="15" fill="rgb(221,193,43)" fg:x="863" fg:w="276"/><text x="8.7075%" y="607.50">co..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (276 samples, 2.70%)</title><rect x="8.4575%" y="581" width="2.7048%" height="15" fill="rgb(240,128,52)" fg:x="863" fg:w="276"/><text x="8.7075%" y="591.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (276 samples, 2.70%)</title><rect x="8.4575%" y="565" width="2.7048%" height="15" fill="rgb(253,114,12)" fg:x="863" fg:w="276"/><text x="8.7075%" y="575.50">&lt;a..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (276 samples, 2.70%)</title><rect x="8.4575%" y="549" width="2.7048%" height="15" fill="rgb(215,223,47)" fg:x="863" fg:w="276"/><text x="8.7075%" y="559.50">&lt;a..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (19 samples, 0.19%)</title><rect x="10.9761%" y="533" width="0.1862%" height="15" fill="rgb(248,225,23)" fg:x="1120" fg:w="19"/><text x="11.2261%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (19 samples, 0.19%)</title><rect x="10.9761%" y="517" width="0.1862%" height="15" fill="rgb(250,108,0)" fg:x="1120" fg:w="19"/><text x="11.2261%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (19 samples, 0.19%)</title><rect x="10.9761%" y="501" width="0.1862%" height="15" fill="rgb(228,208,7)" fg:x="1120" fg:w="19"/><text x="11.2261%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (19 samples, 0.19%)</title><rect x="10.9761%" y="485" width="0.1862%" height="15" fill="rgb(244,45,10)" fg:x="1120" fg:w="19"/><text x="11.2261%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (14 samples, 0.14%)</title><rect x="11.0251%" y="469" width="0.1372%" height="15" fill="rgb(207,125,25)" fg:x="1125" fg:w="14"/><text x="11.2751%" y="479.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (14 samples, 0.14%)</title><rect x="11.0251%" y="453" width="0.1372%" height="15" fill="rgb(210,195,18)" fg:x="1125" fg:w="14"/><text x="11.2751%" y="463.50"></text></g><g><title>alloc::alloc::alloc (14 samples, 0.14%)</title><rect x="11.0251%" y="437" width="0.1372%" height="15" fill="rgb(249,80,12)" fg:x="1125" fg:w="14"/><text x="11.2751%" y="447.50"></text></g><g><title>malloc (10 samples, 0.10%)</title><rect x="11.0643%" y="421" width="0.0980%" height="15" fill="rgb(221,65,9)" fg:x="1129" fg:w="10"/><text x="11.3143%" y="431.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (7 samples, 0.07%)</title><rect x="11.1623%" y="581" width="0.0686%" height="15" fill="rgb(235,49,36)" fg:x="1139" fg:w="7"/><text x="11.4123%" y="591.50"></text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for f64&gt;::from (1,071 samples, 10.50%)</title><rect x="15.6801%" y="469" width="10.4959%" height="15" fill="rgb(225,32,20)" fg:x="1600" fg:w="1071"/><text x="15.9301%" y="479.50">core::convert::..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (4,480 samples, 43.90%)</title><rect x="15.2391%" y="501" width="43.9044%" height="15" fill="rgb(215,141,46)" fg:x="1555" fg:w="4480"/><text x="15.4891%" y="511.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::objective::_{{closure}} (4,480 samples, 43.90%)</title><rect x="15.2391%" y="485" width="43.9044%" height="15" fill="rgb(250,160,47)" fg:x="1555" fg:w="4480"/><text x="15.4891%" y="495.50">&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::objective::_{{closur..</text></g><g><title>problem_factory::sat_3::SAT3::eval_solution (3,364 samples, 32.97%)</title><rect x="26.1760%" y="469" width="32.9675%" height="15" fill="rgb(216,222,40)" fg:x="2671" fg:w="3364"/><text x="26.4260%" y="479.50">problem_factory::sat_3::SAT3::eval_solution</text></g><g><title>std::f64::&lt;impl f64&gt;::abs (63 samples, 0.62%)</title><rect x="58.5261%" y="453" width="0.6174%" height="15" fill="rgb(234,217,39)" fg:x="5972" fg:w="63"/><text x="58.7761%" y="463.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::normed_objective (6,245 samples, 61.20%)</title><rect x="11.1623%" y="613" width="61.2015%" height="15" fill="rgb(207,178,40)" fg:x="1139" fg:w="6245"/><text x="11.4123%" y="623.50">&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::normed_objective</text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::objective (6,245 samples, 61.20%)</title><rect x="11.1623%" y="597" width="61.2015%" height="15" fill="rgb(221,136,13)" fg:x="1139" fg:w="6245"/><text x="11.4123%" y="607.50">&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::objective</text></g><g><title>core::iter::traits::iterator::Iterator::sum (6,238 samples, 61.13%)</title><rect x="11.2309%" y="581" width="61.1329%" height="15" fill="rgb(249,199,10)" fg:x="1146" fg:w="6238"/><text x="11.4809%" y="591.50">core::iter::traits::iterator::Iterator::sum</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (6,238 samples, 61.13%)</title><rect x="11.2309%" y="565" width="61.1329%" height="15" fill="rgb(249,222,13)" fg:x="1146" fg:w="6238"/><text x="11.4809%" y="575.50">&lt;f64 as core::iter::traits::accum::Sum&gt;::sum</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,238 samples, 61.13%)</title><rect x="11.2309%" y="549" width="61.1329%" height="15" fill="rgb(244,185,38)" fg:x="1146" fg:w="6238"/><text x="11.4809%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,238 samples, 61.13%)</title><rect x="11.2309%" y="533" width="61.1329%" height="15" fill="rgb(236,202,9)" fg:x="1146" fg:w="6238"/><text x="11.4809%" y="543.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (6,238 samples, 61.13%)</title><rect x="11.2309%" y="517" width="61.1329%" height="15" fill="rgb(250,229,37)" fg:x="1146" fg:w="6238"/><text x="11.4809%" y="527.50">&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1,349 samples, 13.22%)</title><rect x="59.1435%" y="501" width="13.2203%" height="15" fill="rgb(206,174,23)" fg:x="6035" fg:w="1349"/><text x="59.3935%" y="511.50">core::iter::range::&lt;..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1,349 samples, 13.22%)</title><rect x="59.1435%" y="485" width="13.2203%" height="15" fill="rgb(211,33,43)" fg:x="6035" fg:w="1349"/><text x="59.3935%" y="495.50">&lt;core::ops::range::R..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (1,349 samples, 13.22%)</title><rect x="59.1435%" y="469" width="13.2203%" height="15" fill="rgb(245,58,50)" fg:x="6035" fg:w="1349"/><text x="59.3935%" y="479.50">core::cmp::impls::&lt;i..</text></g><g><title>__rdl_dealloc (3 samples, 0.03%)</title><rect x="72.3932%" y="533" width="0.0294%" height="15" fill="rgb(244,68,36)" fg:x="7387" fg:w="3"/><text x="72.6432%" y="543.50"></text></g><g><title>__rust_dealloc (4 samples, 0.04%)</title><rect x="72.4226%" y="533" width="0.0392%" height="15" fill="rgb(232,229,15)" fg:x="7390" fg:w="4"/><text x="72.6726%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (6,563 samples, 64.32%)</title><rect x="8.3301%" y="773" width="64.3179%" height="15" fill="rgb(254,30,23)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="783.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (6,563 samples, 64.32%)</title><rect x="8.3301%" y="757" width="64.3179%" height="15" fill="rgb(235,160,14)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="767.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (6,563 samples, 64.32%)</title><rect x="8.3301%" y="741" width="64.3179%" height="15" fill="rgb(212,155,44)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="751.50">core::iter::traits::iterator::Iterator::for_each</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,563 samples, 64.32%)</title><rect x="8.3301%" y="725" width="64.3179%" height="15" fill="rgb(226,2,50)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="735.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,563 samples, 64.32%)</title><rect x="8.3301%" y="709" width="64.3179%" height="15" fill="rgb(234,177,6)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="719.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6,563 samples, 64.32%)</title><rect x="8.3301%" y="693" width="64.3179%" height="15" fill="rgb(217,24,9)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="703.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (6,563 samples, 64.32%)</title><rect x="8.3301%" y="677" width="64.3179%" height="15" fill="rgb(220,13,46)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="687.50">&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate:..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6,563 samples, 64.32%)</title><rect x="8.3301%" y="661" width="64.3179%" height="15" fill="rgb(239,221,27)" fg:x="850" fg:w="6563"/><text x="8.5801%" y="671.50">core::iter::adapters::map::map_fold::_{{closure}}</text></g><g><title>genetic_algorithm::GA::evaluate::_{{closure}} (6,561 samples, 64.30%)</title><rect x="8.3497%" y="645" width="64.2983%" height="15" fill="rgb(222,198,25)" fg:x="852" fg:w="6561"/><text x="8.5997%" y="655.50">genetic_algorithm::GA::evaluate::_{{closure}}</text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::fitness (6,561 samples, 64.30%)</title><rect x="8.3497%" y="629" width="64.2983%" height="15" fill="rgb(211,99,13)" fg:x="852" fg:w="6561"/><text x="8.5997%" y="639.50">&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::fitness</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (29 samples, 0.28%)</title><rect x="72.3638%" y="613" width="0.2842%" height="15" fill="rgb(232,111,31)" fg:x="7384" fg:w="29"/><text x="72.6138%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (29 samples, 0.28%)</title><rect x="72.3638%" y="597" width="0.2842%" height="15" fill="rgb(245,82,37)" fg:x="7384" fg:w="29"/><text x="72.6138%" y="607.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (29 samples, 0.28%)</title><rect x="72.3638%" y="581" width="0.2842%" height="15" fill="rgb(227,149,46)" fg:x="7384" fg:w="29"/><text x="72.6138%" y="591.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (28 samples, 0.27%)</title><rect x="72.3736%" y="565" width="0.2744%" height="15" fill="rgb(218,36,50)" fg:x="7385" fg:w="28"/><text x="72.6236%" y="575.50"></text></g><g><title>alloc::alloc::dealloc (28 samples, 0.27%)</title><rect x="72.3736%" y="549" width="0.2744%" height="15" fill="rgb(226,80,48)" fg:x="7385" fg:w="28"/><text x="72.6236%" y="559.50"></text></g><g><title>cfree (19 samples, 0.19%)</title><rect x="72.4618%" y="533" width="0.1862%" height="15" fill="rgb(238,224,15)" fg:x="7394" fg:w="19"/><text x="72.7118%" y="543.50"></text></g><g><title>[libc.so.6] (16 samples, 0.16%)</title><rect x="72.4912%" y="517" width="0.1568%" height="15" fill="rgb(241,136,10)" fg:x="7397" fg:w="16"/><text x="72.7412%" y="527.50"></text></g><g><title>genetic_algorithm::GA::evaluate (6,564 samples, 64.33%)</title><rect x="8.3301%" y="853" width="64.3277%" height="15" fill="rgb(208,32,45)" fg:x="850" fg:w="6564"/><text x="8.5801%" y="863.50">genetic_algorithm::GA::evaluate</text></g><g><title>core::iter::traits::iterator::Iterator::collect (6,564 samples, 64.33%)</title><rect x="8.3301%" y="837" width="64.3277%" height="15" fill="rgb(207,135,9)" fg:x="850" fg:w="6564"/><text x="8.5801%" y="847.50">core::iter::traits::iterator::Iterator::collect</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (6,564 samples, 64.33%)</title><rect x="8.3301%" y="821" width="64.3277%" height="15" fill="rgb(206,86,44)" fg:x="850" fg:w="6564"/><text x="8.5801%" y="831.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (6,564 samples, 64.33%)</title><rect x="8.3301%" y="805" width="64.3277%" height="15" fill="rgb(245,177,15)" fg:x="850" fg:w="6564"/><text x="8.5801%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (6,564 samples, 64.33%)</title><rect x="8.3301%" y="789" width="64.3277%" height="15" fill="rgb(206,64,50)" fg:x="850" fg:w="6564"/><text x="8.5801%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter</text></g><g><title>core::convert::num::&lt;impl core::convert::From&lt;u32&gt; for f64&gt;::from (3 samples, 0.03%)</title><rect x="72.6970%" y="453" width="0.0294%" height="15" fill="rgb(234,36,40)" fg:x="7418" fg:w="3"/><text x="72.9470%" y="463.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (11 samples, 0.11%)</title><rect x="72.6970%" y="485" width="0.1078%" height="15" fill="rgb(213,64,8)" fg:x="7418" fg:w="11"/><text x="72.9470%" y="495.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::objective::_{{closure}} (11 samples, 0.11%)</title><rect x="72.6970%" y="469" width="0.1078%" height="15" fill="rgb(210,75,36)" fg:x="7418" fg:w="11"/><text x="72.9470%" y="479.50"></text></g><g><title>problem_factory::sat_3::SAT3::eval_solution (8 samples, 0.08%)</title><rect x="72.7264%" y="453" width="0.0784%" height="15" fill="rgb(229,88,21)" fg:x="7421" fg:w="8"/><text x="72.9764%" y="463.50"></text></g><g><title>genetic_algorithm::GA::evaluate (18 samples, 0.18%)</title><rect x="72.6774%" y="837" width="0.1764%" height="15" fill="rgb(252,204,47)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (18 samples, 0.18%)</title><rect x="72.6774%" y="821" width="0.1764%" height="15" fill="rgb(208,77,27)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (18 samples, 0.18%)</title><rect x="72.6774%" y="805" width="0.1764%" height="15" fill="rgb(221,76,26)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 0.18%)</title><rect x="72.6774%" y="789" width="0.1764%" height="15" fill="rgb(225,139,18)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (18 samples, 0.18%)</title><rect x="72.6774%" y="773" width="0.1764%" height="15" fill="rgb(230,137,11)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (18 samples, 0.18%)</title><rect x="72.6774%" y="757" width="0.1764%" height="15" fill="rgb(212,28,1)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="767.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (18 samples, 0.18%)</title><rect x="72.6774%" y="741" width="0.1764%" height="15" fill="rgb(248,164,17)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (18 samples, 0.18%)</title><rect x="72.6774%" y="725" width="0.1764%" height="15" fill="rgb(222,171,42)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.18%)</title><rect x="72.6774%" y="709" width="0.1764%" height="15" fill="rgb(243,84,45)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="719.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.18%)</title><rect x="72.6774%" y="693" width="0.1764%" height="15" fill="rgb(252,49,23)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="703.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (18 samples, 0.18%)</title><rect x="72.6774%" y="677" width="0.1764%" height="15" fill="rgb(215,19,7)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="687.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::fold::enumerate::_{{closure}} (18 samples, 0.18%)</title><rect x="72.6774%" y="661" width="0.1764%" height="15" fill="rgb(238,81,41)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="671.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (18 samples, 0.18%)</title><rect x="72.6774%" y="645" width="0.1764%" height="15" fill="rgb(210,199,37)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="655.50"></text></g><g><title>genetic_algorithm::GA::evaluate::_{{closure}} (18 samples, 0.18%)</title><rect x="72.6774%" y="629" width="0.1764%" height="15" fill="rgb(244,192,49)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="639.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::fitness (18 samples, 0.18%)</title><rect x="72.6774%" y="613" width="0.1764%" height="15" fill="rgb(226,211,11)" fg:x="7416" fg:w="18"/><text x="72.9274%" y="623.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::normed_objective (17 samples, 0.17%)</title><rect x="72.6872%" y="597" width="0.1666%" height="15" fill="rgb(236,162,54)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="607.50"></text></g><g><title>&lt;problem_factory::sat_3::SAT3 as problem::Problem&gt;::objective (17 samples, 0.17%)</title><rect x="72.6872%" y="581" width="0.1666%" height="15" fill="rgb(220,229,9)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (17 samples, 0.17%)</title><rect x="72.6872%" y="565" width="0.1666%" height="15" fill="rgb(250,87,22)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="575.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (17 samples, 0.17%)</title><rect x="72.6872%" y="549" width="0.1666%" height="15" fill="rgb(239,43,17)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.17%)</title><rect x="72.6872%" y="533" width="0.1666%" height="15" fill="rgb(231,177,25)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::fold (17 samples, 0.17%)</title><rect x="72.6872%" y="517" width="0.1666%" height="15" fill="rgb(219,179,1)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::fold (17 samples, 0.17%)</title><rect x="72.6872%" y="501" width="0.1666%" height="15" fill="rgb(238,219,53)" fg:x="7417" fg:w="17"/><text x="72.9372%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (5 samples, 0.05%)</title><rect x="72.8048%" y="485" width="0.0490%" height="15" fill="rgb(232,167,36)" fg:x="7429" fg:w="5"/><text x="73.0548%" y="495.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (5 samples, 0.05%)</title><rect x="72.8048%" y="469" width="0.0490%" height="15" fill="rgb(244,19,51)" fg:x="7429" fg:w="5"/><text x="73.0548%" y="479.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for usize&gt;::lt (5 samples, 0.05%)</title><rect x="72.8048%" y="453" width="0.0490%" height="15" fill="rgb(224,6,22)" fg:x="7429" fg:w="5"/><text x="73.0548%" y="463.50"></text></g><g><title>genetic_algorithm::GA::genocide (22 samples, 0.22%)</title><rect x="72.6578%" y="853" width="0.2156%" height="15" fill="rgb(224,145,5)" fg:x="7414" fg:w="22"/><text x="72.9078%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (7 samples, 0.07%)</title><rect x="72.8734%" y="837" width="0.0686%" height="15" fill="rgb(234,130,49)" fg:x="7436" fg:w="7"/><text x="73.1234%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (7 samples, 0.07%)</title><rect x="72.8734%" y="821" width="0.0686%" height="15" fill="rgb(254,6,2)" fg:x="7436" fg:w="7"/><text x="73.1234%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.07%)</title><rect x="72.8734%" y="805" width="0.0686%" height="15" fill="rgb(208,96,46)" fg:x="7436" fg:w="7"/><text x="73.1234%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.07%)</title><rect x="72.8734%" y="789" width="0.0686%" height="15" fill="rgb(239,3,39)" fg:x="7436" fg:w="7"/><text x="73.1234%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (6 samples, 0.06%)</title><rect x="72.8832%" y="773" width="0.0588%" height="15" fill="rgb(233,210,1)" fg:x="7437" fg:w="6"/><text x="73.1332%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (6 samples, 0.06%)</title><rect x="72.8832%" y="757" width="0.0588%" height="15" fill="rgb(244,137,37)" fg:x="7437" fg:w="6"/><text x="73.1332%" y="767.50"></text></g><g><title>core::cmp::max_by (6 samples, 0.06%)</title><rect x="72.8832%" y="741" width="0.0588%" height="15" fill="rgb(240,136,2)" fg:x="7437" fg:w="6"/><text x="73.1332%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.03%)</title><rect x="72.9126%" y="725" width="0.0294%" height="15" fill="rgb(239,18,37)" fg:x="7440" fg:w="3"/><text x="73.1626%" y="735.50"></text></g><g><title>genetic_algorithm::GA::log_generation::_{{closure}} (3 samples, 0.03%)</title><rect x="72.9126%" y="709" width="0.0294%" height="15" fill="rgb(218,185,22)" fg:x="7440" fg:w="3"/><text x="73.1626%" y="719.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::total_cmp (3 samples, 0.03%)</title><rect x="72.9126%" y="693" width="0.0294%" height="15" fill="rgb(225,218,4)" fg:x="7440" fg:w="3"/><text x="73.1626%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (7 samples, 0.07%)</title><rect x="72.9420%" y="837" width="0.0686%" height="15" fill="rgb(230,182,32)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (7 samples, 0.07%)</title><rect x="72.9420%" y="821" width="0.0686%" height="15" fill="rgb(242,56,43)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.07%)</title><rect x="72.9420%" y="805" width="0.0686%" height="15" fill="rgb(233,99,24)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.07%)</title><rect x="72.9420%" y="789" width="0.0686%" height="15" fill="rgb(234,209,42)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (7 samples, 0.07%)</title><rect x="72.9420%" y="773" width="0.0686%" height="15" fill="rgb(227,7,12)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="783.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (7 samples, 0.07%)</title><rect x="72.9420%" y="757" width="0.0686%" height="15" fill="rgb(245,203,43)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="767.50"></text></g><g><title>core::cmp::min_by (7 samples, 0.07%)</title><rect x="72.9420%" y="741" width="0.0686%" height="15" fill="rgb(238,205,33)" fg:x="7443" fg:w="7"/><text x="73.1920%" y="751.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (3 samples, 0.03%)</title><rect x="72.9812%" y="725" width="0.0294%" height="15" fill="rgb(231,56,7)" fg:x="7447" fg:w="3"/><text x="73.2312%" y="735.50"></text></g><g><title>genetic_algorithm::GA::log_generation::_{{closure}} (3 samples, 0.03%)</title><rect x="72.9812%" y="709" width="0.0294%" height="15" fill="rgb(244,186,29)" fg:x="7447" fg:w="3"/><text x="73.2312%" y="719.50"></text></g><g><title>core::f64::&lt;impl f64&gt;::total_cmp (3 samples, 0.03%)</title><rect x="72.9812%" y="693" width="0.0294%" height="15" fill="rgb(234,111,31)" fg:x="7447" fg:w="3"/><text x="73.2312%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (2 samples, 0.02%)</title><rect x="73.0106%" y="837" width="0.0196%" height="15" fill="rgb(241,149,10)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="847.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&lt;&amp;f64&gt;&gt;::sum (2 samples, 0.02%)</title><rect x="73.0106%" y="821" width="0.0196%" height="15" fill="rgb(249,206,44)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="831.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="73.0106%" y="805" width="0.0196%" height="15" fill="rgb(251,153,30)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="815.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="73.0106%" y="789" width="0.0196%" height="15" fill="rgb(239,152,38)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="799.50"></text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2 samples, 0.02%)</title><rect x="73.0106%" y="773" width="0.0196%" height="15" fill="rgb(249,139,47)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="783.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&lt;&amp;f64&gt;&gt;::sum::_{{closure}} (2 samples, 0.02%)</title><rect x="73.0106%" y="757" width="0.0196%" height="15" fill="rgb(244,64,35)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="767.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&lt;&amp;f64&gt;&gt;::add (2 samples, 0.02%)</title><rect x="73.0106%" y="741" width="0.0196%" height="15" fill="rgb(216,46,15)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="751.50"></text></g><g><title>&lt;f64 as core::ops::arith::Add&gt;::add (2 samples, 0.02%)</title><rect x="73.0106%" y="725" width="0.0196%" height="15" fill="rgb(250,74,19)" fg:x="7450" fg:w="2"/><text x="73.2606%" y="735.50"></text></g><g><title>log4rs::encode::pattern::Chunk::encode (2 samples, 0.02%)</title><rect x="73.0694%" y="725" width="0.0196%" height="15" fill="rgb(249,42,33)" fg:x="7456" fg:w="2"/><text x="73.3194%" y="735.50"></text></g><g><title>core::fmt::Formatter::write_formatted_parts (4 samples, 0.04%)</title><rect x="73.1968%" y="661" width="0.0392%" height="15" fill="rgb(242,149,17)" fg:x="7469" fg:w="4"/><text x="73.4468%" y="671.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.02%)</title><rect x="73.2164%" y="645" width="0.0196%" height="15" fill="rgb(244,29,21)" fg:x="7471" fg:w="2"/><text x="73.4664%" y="655.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.02%)</title><rect x="73.2164%" y="629" width="0.0196%" height="15" fill="rgb(220,130,37)" fg:x="7471" fg:w="2"/><text x="73.4664%" y="639.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_to_buffer_unchecked (2 samples, 0.02%)</title><rect x="73.2164%" y="613" width="0.0196%" height="15" fill="rgb(211,67,2)" fg:x="7471" fg:w="2"/><text x="73.4664%" y="623.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="73.2164%" y="597" width="0.0196%" height="15" fill="rgb(235,68,52)" fg:x="7471" fg:w="2"/><text x="73.4664%" y="607.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="73.2164%" y="581" width="0.0196%" height="15" fill="rgb(246,142,3)" fg:x="7471" fg:w="2"/><text x="73.4664%" y="591.50"></text></g><g><title>core::fmt::float::float_to_decimal_common_shortest (23 samples, 0.23%)</title><rect x="73.1184%" y="677" width="0.2254%" height="15" fill="rgb(241,25,7)" fg:x="7461" fg:w="23"/><text x="73.3684%" y="687.50"></text></g><g><title>core::num::flt2dec::strategy::grisu::format_shortest_opt (11 samples, 0.11%)</title><rect x="73.2360%" y="661" width="0.1078%" height="15" fill="rgb(242,119,39)" fg:x="7473" fg:w="11"/><text x="73.4860%" y="671.50"></text></g><g><title>&lt;log4rs::encode::pattern::PatternEncoder as log4rs::encode::Encode&gt;::encode (30 samples, 0.29%)</title><rect x="73.0596%" y="741" width="0.2940%" height="15" fill="rgb(241,98,45)" fg:x="7455" fg:w="30"/><text x="73.3096%" y="751.50"></text></g><g><title>log4rs::encode::pattern::FormattedChunk::encode (27 samples, 0.26%)</title><rect x="73.0890%" y="725" width="0.2646%" height="15" fill="rgb(254,28,30)" fg:x="7458" fg:w="27"/><text x="73.3390%" y="735.50"></text></g><g><title>std::io::Write::write_fmt (27 samples, 0.26%)</title><rect x="73.0890%" y="709" width="0.2646%" height="15" fill="rgb(241,142,54)" fg:x="7458" fg:w="27"/><text x="73.3390%" y="719.50"></text></g><g><title>core::fmt::write (27 samples, 0.26%)</title><rect x="73.0890%" y="693" width="0.2646%" height="15" fill="rgb(222,85,15)" fg:x="7458" fg:w="27"/><text x="73.3390%" y="703.50"></text></g><g><title>genetic_algorithm::GA::log_generation (101 samples, 0.99%)</title><rect x="72.8734%" y="853" width="0.9898%" height="15" fill="rgb(210,85,47)" fg:x="7436" fg:w="101"/><text x="73.1234%" y="863.50"></text></g><g><title>log::__private_api::log (85 samples, 0.83%)</title><rect x="73.0302%" y="837" width="0.8330%" height="15" fill="rgb(224,206,25)" fg:x="7452" fg:w="85"/><text x="73.2802%" y="847.50"></text></g><g><title>log::__private_api::log_impl (85 samples, 0.83%)</title><rect x="73.0302%" y="821" width="0.8330%" height="15" fill="rgb(243,201,19)" fg:x="7452" fg:w="85"/><text x="73.2802%" y="831.50"></text></g><g><title>&lt;log4rs::Logger as log::Log&gt;::log (85 samples, 0.83%)</title><rect x="73.0302%" y="805" width="0.8330%" height="15" fill="rgb(236,59,4)" fg:x="7452" fg:w="85"/><text x="73.2802%" y="815.50"></text></g><g><title>log4rs::ConfiguredLogger::log (83 samples, 0.81%)</title><rect x="73.0498%" y="789" width="0.8134%" height="15" fill="rgb(254,179,45)" fg:x="7454" fg:w="83"/><text x="73.2998%" y="799.50"></text></g><g><title>log4rs::Appender::append (83 samples, 0.81%)</title><rect x="73.0498%" y="773" width="0.8134%" height="15" fill="rgb(226,14,10)" fg:x="7454" fg:w="83"/><text x="73.2998%" y="783.50"></text></g><g><title>&lt;log4rs::append::file::FileAppender as log4rs::append::Append&gt;::append (82 samples, 0.80%)</title><rect x="73.0596%" y="757" width="0.8036%" height="15" fill="rgb(244,27,41)" fg:x="7455" fg:w="82"/><text x="73.3096%" y="767.50"></text></g><g><title>&lt;log4rs::encode::writer::simple::SimpleWriter&lt;W&gt; as std::io::Write&gt;::flush (52 samples, 0.51%)</title><rect x="73.3536%" y="741" width="0.5096%" height="15" fill="rgb(235,35,32)" fg:x="7485" fg:w="52"/><text x="73.6036%" y="751.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::flush (52 samples, 0.51%)</title><rect x="73.3536%" y="725" width="0.5096%" height="15" fill="rgb(218,68,31)" fg:x="7485" fg:w="52"/><text x="73.6036%" y="735.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (52 samples, 0.51%)</title><rect x="73.3536%" y="709" width="0.5096%" height="15" fill="rgb(207,120,37)" fg:x="7485" fg:w="52"/><text x="73.6036%" y="719.50"></text></g><g><title>&lt;std::process::ChildStdin as std::io::Write&gt;::write (52 samples, 0.51%)</title><rect x="73.3536%" y="693" width="0.5096%" height="15" fill="rgb(227,98,0)" fg:x="7485" fg:w="52"/><text x="73.6036%" y="703.50"></text></g><g><title>write (52 samples, 0.51%)</title><rect x="73.3536%" y="677" width="0.5096%" height="15" fill="rgb(207,7,3)" fg:x="7485" fg:w="52"/><text x="73.6036%" y="687.50"></text></g><g><title>[unknown] (51 samples, 0.50%)</title><rect x="73.3634%" y="661" width="0.4998%" height="15" fill="rgb(206,98,19)" fg:x="7486" fg:w="51"/><text x="73.6134%" y="671.50"></text></g><g><title>[unknown] (49 samples, 0.48%)</title><rect x="73.3830%" y="645" width="0.4802%" height="15" fill="rgb(217,5,26)" fg:x="7488" fg:w="49"/><text x="73.6330%" y="655.50"></text></g><g><title>[unknown] (47 samples, 0.46%)</title><rect x="73.4026%" y="629" width="0.4606%" height="15" fill="rgb(235,190,38)" fg:x="7490" fg:w="47"/><text x="73.6526%" y="639.50"></text></g><g><title>[unknown] (44 samples, 0.43%)</title><rect x="73.4320%" y="613" width="0.4312%" height="15" fill="rgb(247,86,24)" fg:x="7493" fg:w="44"/><text x="73.6820%" y="623.50"></text></g><g><title>[unknown] (37 samples, 0.36%)</title><rect x="73.5006%" y="597" width="0.3626%" height="15" fill="rgb(205,101,16)" fg:x="7500" fg:w="37"/><text x="73.7506%" y="607.50"></text></g><g><title>[unknown] (32 samples, 0.31%)</title><rect x="73.5496%" y="581" width="0.3136%" height="15" fill="rgb(246,168,33)" fg:x="7505" fg:w="32"/><text x="73.7996%" y="591.50"></text></g><g><title>[unknown] (24 samples, 0.24%)</title><rect x="73.6280%" y="565" width="0.2352%" height="15" fill="rgb(231,114,1)" fg:x="7513" fg:w="24"/><text x="73.8780%" y="575.50"></text></g><g><title>[unknown] (21 samples, 0.21%)</title><rect x="73.6574%" y="549" width="0.2058%" height="15" fill="rgb(207,184,53)" fg:x="7516" fg:w="21"/><text x="73.9074%" y="559.50"></text></g><g><title>[unknown] (12 samples, 0.12%)</title><rect x="73.7456%" y="533" width="0.1176%" height="15" fill="rgb(224,95,51)" fg:x="7525" fg:w="12"/><text x="73.9956%" y="543.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="73.8044%" y="517" width="0.0588%" height="15" fill="rgb(212,188,45)" fg:x="7531" fg:w="6"/><text x="74.0544%" y="527.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="73.8338%" y="501" width="0.0294%" height="15" fill="rgb(223,154,38)" fg:x="7534" fg:w="3"/><text x="74.0838%" y="511.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="73.8436%" y="485" width="0.0196%" height="15" fill="rgb(251,22,52)" fg:x="7535" fg:w="2"/><text x="74.0936%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (7 samples, 0.07%)</title><rect x="73.8632%" y="677" width="0.0686%" height="15" fill="rgb(229,209,22)" fg:x="7537" fg:w="7"/><text x="74.1132%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (7 samples, 0.07%)</title><rect x="73.8632%" y="661" width="0.0686%" height="15" fill="rgb(234,138,34)" fg:x="7537" fg:w="7"/><text x="74.1132%" y="671.50"></text></g><g><title>core::ptr::write (6 samples, 0.06%)</title><rect x="73.8730%" y="645" width="0.0588%" height="15" fill="rgb(212,95,11)" fg:x="7538" fg:w="6"/><text x="74.1230%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::_{{closure}} (19 samples, 0.19%)</title><rect x="75.2254%" y="501" width="0.1862%" height="15" fill="rgb(240,179,47)" fg:x="7676" fg:w="19"/><text x="75.4754%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::_{{closure}} (19 samples, 0.19%)</title><rect x="75.2254%" y="485" width="0.1862%" height="15" fill="rgb(240,163,11)" fg:x="7676" fg:w="19"/><text x="75.4754%" y="495.50"></text></g><g><title>core::ptr::write (19 samples, 0.19%)</title><rect x="75.2254%" y="469" width="0.1862%" height="15" fill="rgb(236,37,12)" fg:x="7676" fg:w="19"/><text x="75.4754%" y="479.50"></text></g><g><title>individual_creation::IndividualType::mutate (21 samples, 0.21%)</title><rect x="80.3900%" y="485" width="0.2058%" height="15" fill="rgb(232,164,16)" fg:x="8203" fg:w="21"/><text x="80.6400%" y="495.50"></text></g><g><title>&lt;f64 as rand::distributions::utils::FloatSIMDUtils&gt;::cast_from_int (7 samples, 0.07%)</title><rect x="82.6147%" y="453" width="0.0686%" height="15" fill="rgb(244,205,15)" fg:x="8430" fg:w="7"/><text x="82.8647%" y="463.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (112 samples, 1.10%)</title><rect x="82.7225%" y="373" width="1.0976%" height="15" fill="rgb(223,117,47)" fg:x="8441" fg:w="112"/><text x="82.9725%" y="383.50"></text></g><g><title>rand_chacha::guts::refill_wide (25 samples, 0.25%)</title><rect x="84.0161%" y="309" width="0.2450%" height="15" fill="rgb(244,107,35)" fg:x="8573" fg:w="25"/><text x="84.2661%" y="319.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as core::ops::arith::Add&gt;::add (22 samples, 0.22%)</title><rect x="84.4081%" y="261" width="0.2156%" height="15" fill="rgb(205,140,8)" fg:x="8613" fg:w="22"/><text x="84.6581%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_add_epi32 (22 samples, 0.22%)</title><rect x="84.4081%" y="245" width="0.2156%" height="15" fill="rgb(228,84,46)" fg:x="8613" fg:w="22"/><text x="84.6581%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,S4,NI&gt; as ppv_lite86::types::StoreBytes&gt;::write_le (7 samples, 0.07%)</title><rect x="84.6237%" y="261" width="0.0686%" height="15" fill="rgb(254,188,9)" fg:x="8635" fg:w="7"/><text x="84.8737%" y="271.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_storeu_si128 (7 samples, 0.07%)</title><rect x="84.6237%" y="245" width="0.0686%" height="15" fill="rgb(206,112,54)" fg:x="8635" fg:w="7"/><text x="84.8737%" y="255.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write_unaligned (7 samples, 0.07%)</title><rect x="84.6237%" y="229" width="0.0686%" height="15" fill="rgb(216,84,49)" fg:x="8635" fg:w="7"/><text x="84.8737%" y="239.50"></text></g><g><title>core::ptr::write_unaligned (7 samples, 0.07%)</title><rect x="84.6237%" y="213" width="0.0686%" height="15" fill="rgb(214,194,35)" fg:x="8635" fg:w="7"/><text x="84.8737%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (7 samples, 0.07%)</title><rect x="84.6237%" y="197" width="0.0686%" height="15" fill="rgb(249,28,3)" fg:x="8635" fg:w="7"/><text x="84.8737%" y="207.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::u32x4_sse2&lt;S3,ppv_lite86::x86_64::YesS4,NI&gt; as ppv_lite86::types::Vec4&lt;u32&gt;&gt;::insert (4 samples, 0.04%)</title><rect x="84.6923%" y="261" width="0.0392%" height="15" fill="rgb(222,56,52)" fg:x="8642" fg:w="4"/><text x="84.9423%" y="271.50"></text></g><g><title>core::core_arch::x86::sse41::_mm_insert_epi32 (4 samples, 0.04%)</title><rect x="84.6923%" y="245" width="0.0392%" height="15" fill="rgb(245,217,50)" fg:x="8642" fg:w="4"/><text x="84.9423%" y="255.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (12 samples, 0.12%)</title><rect x="84.7315%" y="261" width="0.1176%" height="15" fill="rgb(213,201,24)" fg:x="8646" fg:w="12"/><text x="84.9815%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (12 samples, 0.12%)</title><rect x="84.7315%" y="245" width="0.1176%" height="15" fill="rgb(248,116,28)" fg:x="8646" fg:w="12"/><text x="84.9815%" y="255.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for u32&gt;::lt (12 samples, 0.12%)</title><rect x="84.7315%" y="229" width="0.1176%" height="15" fill="rgb(219,72,43)" fg:x="8646" fg:w="12"/><text x="84.9815%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (2 samples, 0.02%)</title><rect x="84.8491%" y="261" width="0.0196%" height="15" fill="rgb(209,138,14)" fg:x="8658" fg:w="2"/><text x="85.0991%" y="271.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::from_lanes (4 samples, 0.04%)</title><rect x="84.8687%" y="261" width="0.0392%" height="15" fill="rgb(222,18,33)" fg:x="8660" fg:w="4"/><text x="85.1187%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::from_lanes (4 samples, 0.04%)</title><rect x="84.8687%" y="245" width="0.0392%" height="15" fill="rgb(213,199,7)" fg:x="8660" fg:w="4"/><text x="85.1187%" y="255.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_setr_m128i (4 samples, 0.04%)</title><rect x="84.8687%" y="229" width="0.0392%" height="15" fill="rgb(250,110,10)" fg:x="8660" fg:w="4"/><text x="85.1187%" y="239.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128i (4 samples, 0.04%)</title><rect x="84.8687%" y="213" width="0.0392%" height="15" fill="rgb(248,123,6)" fg:x="8660" fg:w="4"/><text x="85.1187%" y="223.50"></text></g><g><title>core::core_arch::x86::avx::_mm256_set_m128 (4 samples, 0.04%)</title><rect x="84.8687%" y="197" width="0.0392%" height="15" fill="rgb(206,91,31)" fg:x="8660" fg:w="4"/><text x="85.1187%" y="207.50"></text></g><g><title>ppv_lite86::x86_64::sse2::avx2::_&lt;impl ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 4]&gt; for ppv_lite86::soft::x2&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt;,ppv_lite86::x86_64::sse2::G0&gt;&gt;::to_lanes (10 samples, 0.10%)</title><rect x="84.9079%" y="261" width="0.0980%" height="15" fill="rgb(211,154,13)" fg:x="8664" fg:w="10"/><text x="85.1579%" y="271.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::MultiLane&lt;[ppv_lite86::x86_64::sse2::u32x4_sse2&lt;ppv_lite86::x86_64::YesS3,ppv_lite86::x86_64::YesS4,NI&gt;: 2]&gt;&gt;::to_lanes (10 samples, 0.10%)</title><rect x="84.9079%" y="245" width="0.0980%" height="15" fill="rgb(225,148,7)" fg:x="8664" fg:w="10"/><text x="85.1579%" y="255.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_extracti128_si256 (10 samples, 0.10%)</title><rect x="84.9079%" y="229" width="0.0980%" height="15" fill="rgb(220,160,43)" fg:x="8664" fg:w="10"/><text x="85.1579%" y="239.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (19 samples, 0.19%)</title><rect x="85.0059%" y="245" width="0.1862%" height="15" fill="rgb(213,52,39)" fg:x="8674" fg:w="19"/><text x="85.2559%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (19 samples, 0.19%)</title><rect x="85.0059%" y="229" width="0.1862%" height="15" fill="rgb(243,137,7)" fg:x="8674" fg:w="19"/><text x="85.2559%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (19 samples, 0.19%)</title><rect x="85.0059%" y="213" width="0.1862%" height="15" fill="rgb(230,79,13)" fg:x="8674" fg:w="19"/><text x="85.2559%" y="223.50"></text></g><g><title>rand_chacha::guts::diagonalize (39 samples, 0.38%)</title><rect x="85.0059%" y="261" width="0.3822%" height="15" fill="rgb(247,105,23)" fg:x="8674" fg:w="39"/><text x="85.2559%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (20 samples, 0.20%)</title><rect x="85.1921%" y="245" width="0.1960%" height="15" fill="rgb(223,179,41)" fg:x="8693" fg:w="20"/><text x="85.4421%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (20 samples, 0.20%)</title><rect x="85.1921%" y="229" width="0.1960%" height="15" fill="rgb(218,9,34)" fg:x="8693" fg:w="20"/><text x="85.4421%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (20 samples, 0.20%)</title><rect x="85.1921%" y="213" width="0.1960%" height="15" fill="rgb(222,106,8)" fg:x="8693" fg:w="20"/><text x="85.4421%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (128 samples, 1.25%)</title><rect x="85.3881%" y="245" width="1.2544%" height="15" fill="rgb(211,220,0)" fg:x="8713" fg:w="128"/><text x="85.6381%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (128 samples, 1.25%)</title><rect x="85.3881%" y="229" width="1.2544%" height="15" fill="rgb(229,52,16)" fg:x="8713" fg:w="128"/><text x="85.6381%" y="239.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (128 samples, 1.25%)</title><rect x="85.3881%" y="213" width="1.2544%" height="15" fill="rgb(212,155,18)" fg:x="8713" fg:w="128"/><text x="85.6381%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (128 samples, 1.25%)</title><rect x="85.3881%" y="197" width="1.2544%" height="15" fill="rgb(242,21,14)" fg:x="8713" fg:w="128"/><text x="85.6381%" y="207.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::bit::BitXor&gt;::bitxor (87 samples, 0.85%)</title><rect x="86.6425%" y="245" width="0.8526%" height="15" fill="rgb(222,19,48)" fg:x="8841" fg:w="87"/><text x="86.8925%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::bit::BitXor&gt;::bitxor (87 samples, 0.85%)</title><rect x="86.6425%" y="229" width="0.8526%" height="15" fill="rgb(232,45,27)" fg:x="8841" fg:w="87"/><text x="86.8925%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_xor_si256 (87 samples, 0.85%)</title><rect x="86.6425%" y="213" width="0.8526%" height="15" fill="rgb(249,103,42)" fg:x="8841" fg:w="87"/><text x="86.8925%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (130 samples, 1.27%)</title><rect x="87.4951%" y="245" width="1.2740%" height="15" fill="rgb(246,81,33)" fg:x="8928" fg:w="130"/><text x="87.7451%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (130 samples, 1.27%)</title><rect x="87.4951%" y="229" width="1.2740%" height="15" fill="rgb(252,33,42)" fg:x="8928" fg:w="130"/><text x="87.7451%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (130 samples, 1.27%)</title><rect x="87.4951%" y="213" width="1.2740%" height="15" fill="rgb(209,212,41)" fg:x="8928" fg:w="130"/><text x="87.7451%" y="223.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (125 samples, 1.23%)</title><rect x="88.7691%" y="213" width="1.2250%" height="15" fill="rgb(207,154,6)" fg:x="9058" fg:w="125"/><text x="89.0191%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (167 samples, 1.64%)</title><rect x="88.7691%" y="245" width="1.6366%" height="15" fill="rgb(223,64,47)" fg:x="9058" fg:w="167"/><text x="89.0191%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (167 samples, 1.64%)</title><rect x="88.7691%" y="229" width="1.6366%" height="15" fill="rgb(211,161,38)" fg:x="9058" fg:w="167"/><text x="89.0191%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_srli_epi32 (42 samples, 0.41%)</title><rect x="89.9941%" y="213" width="0.4116%" height="15" fill="rgb(219,138,40)" fg:x="9183" fg:w="42"/><text x="90.2441%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (87 samples, 0.85%)</title><rect x="90.4057%" y="245" width="0.8526%" height="15" fill="rgb(241,228,46)" fg:x="9225" fg:w="87"/><text x="90.6557%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (87 samples, 0.85%)</title><rect x="90.4057%" y="229" width="0.8526%" height="15" fill="rgb(223,209,38)" fg:x="9225" fg:w="87"/><text x="90.6557%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (87 samples, 0.85%)</title><rect x="90.4057%" y="213" width="0.8526%" height="15" fill="rgb(236,164,45)" fg:x="9225" fg:w="87"/><text x="90.6557%" y="223.50"></text></g><g><title>rand_chacha::guts::round (768 samples, 7.53%)</title><rect x="85.3881%" y="261" width="7.5265%" height="15" fill="rgb(231,15,5)" fg:x="8713" fg:w="768"/><text x="85.6381%" y="271.50">rand_chach..</text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (169 samples, 1.66%)</title><rect x="91.2583%" y="245" width="1.6562%" height="15" fill="rgb(252,35,15)" fg:x="9312" fg:w="169"/><text x="91.5083%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (169 samples, 1.66%)</title><rect x="91.2583%" y="229" width="1.6562%" height="15" fill="rgb(248,181,18)" fg:x="9312" fg:w="169"/><text x="91.5083%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (169 samples, 1.66%)</title><rect x="91.2583%" y="213" width="1.6562%" height="15" fill="rgb(233,39,42)" fg:x="9312" fg:w="169"/><text x="91.5083%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (11 samples, 0.11%)</title><rect x="92.9145%" y="245" width="0.1078%" height="15" fill="rgb(238,110,33)" fg:x="9481" fg:w="11"/><text x="93.1645%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (11 samples, 0.11%)</title><rect x="92.9145%" y="229" width="0.1078%" height="15" fill="rgb(233,195,10)" fg:x="9481" fg:w="11"/><text x="93.1645%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (11 samples, 0.11%)</title><rect x="92.9145%" y="213" width="0.1078%" height="15" fill="rgb(254,105,3)" fg:x="9481" fg:w="11"/><text x="93.1645%" y="223.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (25 samples, 0.25%)</title><rect x="93.0223%" y="245" width="0.2450%" height="15" fill="rgb(221,225,9)" fg:x="9492" fg:w="25"/><text x="93.2723%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (25 samples, 0.25%)</title><rect x="93.0223%" y="229" width="0.2450%" height="15" fill="rgb(224,227,45)" fg:x="9492" fg:w="25"/><text x="93.2723%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (25 samples, 0.25%)</title><rect x="93.0223%" y="213" width="0.2450%" height="15" fill="rgb(229,198,43)" fg:x="9492" fg:w="25"/><text x="93.2723%" y="223.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (926 samples, 9.07%)</title><rect x="84.2611%" y="309" width="9.0749%" height="15" fill="rgb(206,209,35)" fg:x="8598" fg:w="926"/><text x="84.5111%" y="319.50">rand_chacha::..</text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (926 samples, 9.07%)</title><rect x="84.2611%" y="293" width="9.0749%" height="15" fill="rgb(245,195,53)" fg:x="8598" fg:w="926"/><text x="84.5111%" y="303.50">rand_chacha::..</text></g><g><title>rand_chacha::guts::refill_wide_impl (926 samples, 9.07%)</title><rect x="84.2611%" y="277" width="9.0749%" height="15" fill="rgb(240,92,26)" fg:x="8598" fg:w="926"/><text x="84.5111%" y="287.50">rand_chacha::..</text></g><g><title>rand_chacha::guts::undiagonalize (43 samples, 0.42%)</title><rect x="92.9145%" y="261" width="0.4214%" height="15" fill="rgb(207,40,23)" fg:x="9481" fg:w="43"/><text x="93.1645%" y="271.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (7 samples, 0.07%)</title><rect x="93.2673%" y="245" width="0.0686%" height="15" fill="rgb(223,111,35)" fg:x="9517" fg:w="7"/><text x="93.5173%" y="255.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (7 samples, 0.07%)</title><rect x="93.2673%" y="229" width="0.0686%" height="15" fill="rgb(229,147,28)" fg:x="9517" fg:w="7"/><text x="93.5173%" y="239.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (7 samples, 0.07%)</title><rect x="93.2673%" y="213" width="0.0686%" height="15" fill="rgb(211,29,28)" fg:x="9517" fg:w="7"/><text x="93.5173%" y="223.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (956 samples, 9.37%)</title><rect x="84.0161%" y="341" width="9.3689%" height="15" fill="rgb(228,72,33)" fg:x="8573" fg:w="956"/><text x="84.2661%" y="351.50">&lt;rand_chacha:..</text></g><g><title>rand_chacha::guts::ChaCha::refill4 (956 samples, 9.37%)</title><rect x="84.0161%" y="325" width="9.3689%" height="15" fill="rgb(205,214,31)" fg:x="8573" fg:w="956"/><text x="84.2661%" y="335.50">rand_chacha::..</text></g><g><title>rand_chacha::guts::refill_wide (5 samples, 0.05%)</title><rect x="93.3359%" y="309" width="0.0490%" height="15" fill="rgb(224,111,15)" fg:x="9524" fg:w="5"/><text x="93.5859%" y="319.50"></text></g><g><title>std_detect::detect::arch::x86::__is_feature_detected::avx2 (5 samples, 0.05%)</title><rect x="93.3359%" y="293" width="0.0490%" height="15" fill="rgb(253,21,26)" fg:x="9524" fg:w="5"/><text x="93.5859%" y="303.50"></text></g><g><title>std_detect::detect::check_for (5 samples, 0.05%)</title><rect x="93.3359%" y="277" width="0.0490%" height="15" fill="rgb(245,139,43)" fg:x="9524" fg:w="5"/><text x="93.5859%" y="287.50"></text></g><g><title>std_detect::detect::cache::test (5 samples, 0.05%)</title><rect x="93.3359%" y="261" width="0.0490%" height="15" fill="rgb(252,170,7)" fg:x="9524" fg:w="5"/><text x="93.5859%" y="271.50"></text></g><g><title>std_detect::detect::cache::Cache::test (5 samples, 0.05%)</title><rect x="93.3359%" y="245" width="0.0490%" height="15" fill="rgb(231,118,14)" fg:x="9524" fg:w="5"/><text x="93.5859%" y="255.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (4 samples, 0.04%)</title><rect x="93.3457%" y="229" width="0.0392%" height="15" fill="rgb(238,83,0)" fg:x="9525" fg:w="4"/><text x="93.5957%" y="239.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.04%)</title><rect x="93.3457%" y="213" width="0.0392%" height="15" fill="rgb(221,39,39)" fg:x="9525" fg:w="4"/><text x="93.5957%" y="223.50"></text></g><g><title>&lt;&amp;mut R as rand_core::RngCore&gt;::try_fill_bytes (31 samples, 0.30%)</title><rect x="93.4045%" y="293" width="0.3038%" height="15" fill="rgb(222,119,46)" fg:x="9531" fg:w="31"/><text x="93.6545%" y="303.50"></text></g><g><title>&lt;rand_core::os::OsRng as rand_core::RngCore&gt;::try_fill_bytes (31 samples, 0.30%)</title><rect x="93.4045%" y="277" width="0.3038%" height="15" fill="rgb(222,165,49)" fg:x="9531" fg:w="31"/><text x="93.6545%" y="287.50"></text></g><g><title>getrandom::getrandom (31 samples, 0.30%)</title><rect x="93.4045%" y="261" width="0.3038%" height="15" fill="rgb(219,113,52)" fg:x="9531" fg:w="31"/><text x="93.6545%" y="271.50"></text></g><g><title>getrandom::getrandom_uninit (31 samples, 0.30%)</title><rect x="93.4045%" y="245" width="0.3038%" height="15" fill="rgb(214,7,15)" fg:x="9531" fg:w="31"/><text x="93.6545%" y="255.50"></text></g><g><title>getrandom::imp::getrandom_inner (29 samples, 0.28%)</title><rect x="93.4241%" y="229" width="0.2842%" height="15" fill="rgb(235,32,4)" fg:x="9533" fg:w="29"/><text x="93.6741%" y="239.50"></text></g><g><title>getrandom::util_libc::sys_fill_exact (28 samples, 0.27%)</title><rect x="93.4339%" y="213" width="0.2744%" height="15" fill="rgb(238,90,54)" fg:x="9534" fg:w="28"/><text x="93.6839%" y="223.50"></text></g><g><title>core::ops::function::Fn::call (28 samples, 0.27%)</title><rect x="93.4339%" y="197" width="0.2744%" height="15" fill="rgb(213,208,19)" fg:x="9534" fg:w="28"/><text x="93.6839%" y="207.50"></text></g><g><title>getrandom::util_libc::getrandom_syscall (28 samples, 0.27%)</title><rect x="93.4339%" y="181" width="0.2744%" height="15" fill="rgb(233,156,4)" fg:x="9534" fg:w="28"/><text x="93.6839%" y="191.50"></text></g><g><title>syscall (28 samples, 0.27%)</title><rect x="93.4339%" y="165" width="0.2744%" height="15" fill="rgb(207,194,5)" fg:x="9534" fg:w="28"/><text x="93.6839%" y="175.50"></text></g><g><title>[unknown] (28 samples, 0.27%)</title><rect x="93.4339%" y="149" width="0.2744%" height="15" fill="rgb(206,111,30)" fg:x="9534" fg:w="28"/><text x="93.6839%" y="159.50"></text></g><g><title>[unknown] (26 samples, 0.25%)</title><rect x="93.4535%" y="133" width="0.2548%" height="15" fill="rgb(243,70,54)" fg:x="9536" fg:w="26"/><text x="93.7035%" y="143.50"></text></g><g><title>[unknown] (24 samples, 0.24%)</title><rect x="93.4731%" y="117" width="0.2352%" height="15" fill="rgb(242,28,8)" fg:x="9538" fg:w="24"/><text x="93.7231%" y="127.50"></text></g><g><title>[unknown] (17 samples, 0.17%)</title><rect x="93.5417%" y="101" width="0.1666%" height="15" fill="rgb(219,106,18)" fg:x="9545" fg:w="17"/><text x="93.7917%" y="111.50"></text></g><g><title>[unknown] (12 samples, 0.12%)</title><rect x="93.5907%" y="85" width="0.1176%" height="15" fill="rgb(244,222,10)" fg:x="9550" fg:w="12"/><text x="93.8407%" y="95.50"></text></g><g><title>[unknown] (11 samples, 0.11%)</title><rect x="93.6005%" y="69" width="0.1078%" height="15" fill="rgb(236,179,52)" fg:x="9551" fg:w="11"/><text x="93.8505%" y="79.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="93.6299%" y="53" width="0.0784%" height="15" fill="rgb(213,23,39)" fg:x="9554" fg:w="8"/><text x="93.8799%" y="63.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="93.6691%" y="37" width="0.0392%" height="15" fill="rgb(238,48,10)" fg:x="9558" fg:w="4"/><text x="93.9191%" y="47.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed_and_generate (34 samples, 0.33%)</title><rect x="93.3849%" y="341" width="0.3332%" height="15" fill="rgb(251,196,23)" fg:x="9529" fg:w="34"/><text x="93.6349%" y="351.50"></text></g><g><title>rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt;::reseed (34 samples, 0.33%)</title><rect x="93.3849%" y="325" width="0.3332%" height="15" fill="rgb(250,152,24)" fg:x="9529" fg:w="34"/><text x="93.6349%" y="335.50"></text></g><g><title>rand_core::SeedableRng::from_rng (34 samples, 0.33%)</title><rect x="93.3849%" y="309" width="0.3332%" height="15" fill="rgb(209,150,17)" fg:x="9529" fg:w="34"/><text x="93.6349%" y="319.50"></text></g><g><title>rand::rngs::adapter::reseeding::fork::get_fork_counter (8 samples, 0.08%)</title><rect x="93.7181%" y="341" width="0.0784%" height="15" fill="rgb(234,202,34)" fg:x="9563" fg:w="8"/><text x="93.9681%" y="351.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (8 samples, 0.08%)</title><rect x="93.7181%" y="325" width="0.0784%" height="15" fill="rgb(253,148,53)" fg:x="9563" fg:w="8"/><text x="93.9681%" y="335.50"></text></g><g><title>core::sync::atomic::atomic_load (8 samples, 0.08%)</title><rect x="93.7181%" y="309" width="0.0784%" height="15" fill="rgb(218,129,16)" fg:x="9563" fg:w="8"/><text x="93.9681%" y="319.50"></text></g><g><title>rand::rng::Rng::gen (1,353 samples, 13.26%)</title><rect x="80.5958%" y="485" width="13.2595%" height="15" fill="rgb(216,85,19)" fg:x="8224" fg:w="1353"/><text x="80.8458%" y="495.50">rand::rng::Rng::gen</text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (1,353 samples, 13.26%)</title><rect x="80.5958%" y="469" width="13.2595%" height="15" fill="rgb(235,228,7)" fg:x="8224" fg:w="1353"/><text x="80.8458%" y="479.50">rand::distributions:..</text></g><g><title>rand::rng::Rng::gen (1,140 samples, 11.17%)</title><rect x="82.6833%" y="453" width="11.1721%" height="15" fill="rgb(245,175,0)" fg:x="8437" fg:w="1140"/><text x="82.9333%" y="463.50">rand::rng::Rng::..</text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (1,140 samples, 11.17%)</title><rect x="82.6833%" y="437" width="11.1721%" height="15" fill="rgb(208,168,36)" fg:x="8437" fg:w="1140"/><text x="82.9333%" y="447.50">rand::distributi..</text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (1,140 samples, 11.17%)</title><rect x="82.6833%" y="421" width="11.1721%" height="15" fill="rgb(246,171,24)" fg:x="8437" fg:w="1140"/><text x="82.9333%" y="431.50">&lt;rand::rngs::thr..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (1,140 samples, 11.17%)</title><rect x="82.6833%" y="405" width="11.1721%" height="15" fill="rgb(215,142,24)" fg:x="8437" fg:w="1140"/><text x="82.9333%" y="415.50">&lt;rand::rngs::ada..</text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (1,140 samples, 11.17%)</title><rect x="82.6833%" y="389" width="11.1721%" height="15" fill="rgb(250,187,7)" fg:x="8437" fg:w="1140"/><text x="82.9333%" y="399.50">&lt;rand_core::bloc..</text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (1,024 samples, 10.04%)</title><rect x="83.8201%" y="373" width="10.0353%" height="15" fill="rgb(228,66,33)" fg:x="8553" fg:w="1024"/><text x="84.0701%" y="383.50">rand_core::bloc..</text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (1,012 samples, 9.92%)</title><rect x="83.9377%" y="357" width="9.9177%" height="15" fill="rgb(234,215,21)" fg:x="8565" fg:w="1012"/><text x="84.1877%" y="367.50">&lt;rand::rngs::a..</text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (6 samples, 0.06%)</title><rect x="93.7966%" y="341" width="0.0588%" height="15" fill="rgb(222,191,20)" fg:x="9571" fg:w="6"/><text x="94.0466%" y="351.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (6 samples, 0.06%)</title><rect x="93.7966%" y="325" width="0.0588%" height="15" fill="rgb(245,79,54)" fg:x="9571" fg:w="6"/><text x="94.0466%" y="335.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (6 samples, 0.06%)</title><rect x="93.7966%" y="309" width="0.0588%" height="15" fill="rgb(240,10,37)" fg:x="9571" fg:w="6"/><text x="94.0466%" y="319.50"></text></g><g><title>rand_chacha::guts::round (5 samples, 0.05%)</title><rect x="93.8064%" y="293" width="0.0490%" height="15" fill="rgb(214,192,32)" fg:x="9572" fg:w="5"/><text x="94.0564%" y="303.50"></text></g><g><title>rand::rngs::thread::THREAD_RNG_KEY::__getit (113 samples, 1.11%)</title><rect x="95.0118%" y="437" width="1.1074%" height="15" fill="rgb(209,36,54)" fg:x="9695" fg:w="113"/><text x="95.2618%" y="447.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (113 samples, 1.11%)</title><rect x="95.0118%" y="421" width="1.1074%" height="15" fill="rgb(220,10,11)" fg:x="9695" fg:w="113"/><text x="95.2618%" y="431.50"></text></g><g><title>std::sys::common::thread_local::lazy::LazyKeyInner&lt;T&gt;::get (113 samples, 1.11%)</title><rect x="95.0118%" y="405" width="1.1074%" height="15" fill="rgb(221,106,17)" fg:x="9695" fg:w="113"/><text x="95.2618%" y="415.50"></text></g><g><title>core::option::Option&lt;T&gt;::as_ref (113 samples, 1.11%)</title><rect x="95.0118%" y="389" width="1.1074%" height="15" fill="rgb(251,142,44)" fg:x="9695" fg:w="113"/><text x="95.2618%" y="399.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,257 samples, 22.12%)</title><rect x="74.0592%" y="533" width="22.1188%" height="15" fill="rgb(238,13,15)" fg:x="7557" fg:w="2257"/><text x="74.3092%" y="543.50">&lt;core::slice::iter::Iter&lt;T&gt; as core..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,138 samples, 20.95%)</title><rect x="75.2254%" y="517" width="20.9526%" height="15" fill="rgb(208,107,27)" fg:x="7676" fg:w="2138"/><text x="75.4754%" y="527.50">core::iter::adapters::map::map_fo..</text></g><g><title>genetic_algorithm::GA::mutation::_{{closure}}::_{{closure}} (2,119 samples, 20.77%)</title><rect x="75.4116%" y="501" width="20.7664%" height="15" fill="rgb(205,136,37)" fg:x="7695" fg:w="2119"/><text x="75.6616%" y="511.50">genetic_algorithm::GA::mutation::..</text></g><g><title>rand::rngs::thread::thread_rng (237 samples, 2.32%)</title><rect x="93.8554%" y="485" width="2.3226%" height="15" fill="rgb(250,205,27)" fg:x="9577" fg:w="237"/><text x="94.1054%" y="495.50">r..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (119 samples, 1.17%)</title><rect x="95.0118%" y="469" width="1.1662%" height="15" fill="rgb(210,80,43)" fg:x="9695" fg:w="119"/><text x="95.2618%" y="479.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (119 samples, 1.17%)</title><rect x="95.0118%" y="453" width="1.1662%" height="15" fill="rgb(247,160,36)" fg:x="9695" fg:w="119"/><text x="95.2618%" y="463.50"></text></g><g><title>rand::rngs::thread::thread_rng::_{{closure}} (6 samples, 0.06%)</title><rect x="96.1192%" y="437" width="0.0588%" height="15" fill="rgb(234,13,49)" fg:x="9808" fg:w="6"/><text x="96.3692%" y="447.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 0.06%)</title><rect x="96.1192%" y="421" width="0.0588%" height="15" fill="rgb(234,122,0)" fg:x="9808" fg:w="6"/><text x="96.3692%" y="431.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (6 samples, 0.06%)</title><rect x="96.1192%" y="405" width="0.0588%" height="15" fill="rgb(207,146,38)" fg:x="9808" fg:w="6"/><text x="96.3692%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,267 samples, 22.22%)</title><rect x="74.0102%" y="549" width="22.2168%" height="15" fill="rgb(207,177,25)" fg:x="7552" fg:w="2267"/><text x="74.2602%" y="559.50">&lt;core::iter::adapters::map::Map&lt;I,F..</text></g><g><title>core::iter::adapters::map::map_fold (5 samples, 0.05%)</title><rect x="96.1780%" y="533" width="0.0490%" height="15" fill="rgb(211,178,42)" fg:x="9814" fg:w="5"/><text x="96.4280%" y="543.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,268 samples, 22.23%)</title><rect x="74.0102%" y="597" width="22.2266%" height="15" fill="rgb(230,69,54)" fg:x="7552" fg:w="2268"/><text x="74.2602%" y="607.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,268 samples, 22.23%)</title><rect x="74.0102%" y="581" width="22.2266%" height="15" fill="rgb(214,135,41)" fg:x="7552" fg:w="2268"/><text x="74.2602%" y="591.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,268 samples, 22.23%)</title><rect x="74.0102%" y="565" width="22.2266%" height="15" fill="rgb(237,67,25)" fg:x="7552" fg:w="2268"/><text x="74.2602%" y="575.50">core::iter::traits::iterator::Itera..</text></g><g><title>__rdl_alloc (2 samples, 0.02%)</title><rect x="96.2760%" y="485" width="0.0196%" height="15" fill="rgb(222,189,50)" fg:x="9824" fg:w="2"/><text x="96.5260%" y="495.50"></text></g><g><title>genetic_algorithm::GA::mutation (2,428 samples, 23.79%)</title><rect x="73.8632%" y="853" width="23.7946%" height="15" fill="rgb(245,148,34)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="863.50">genetic_algorithm::GA::mutation</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,428 samples, 23.79%)</title><rect x="73.8632%" y="837" width="23.7946%" height="15" fill="rgb(222,29,6)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="847.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,428 samples, 23.79%)</title><rect x="73.8632%" y="821" width="23.7946%" height="15" fill="rgb(221,189,43)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="831.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,428 samples, 23.79%)</title><rect x="73.8632%" y="805" width="23.7946%" height="15" fill="rgb(207,36,27)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="815.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,428 samples, 23.79%)</title><rect x="73.8632%" y="789" width="23.7946%" height="15" fill="rgb(217,90,24)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="799.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2,428 samples, 23.79%)</title><rect x="73.8632%" y="773" width="23.7946%" height="15" fill="rgb(224,66,35)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="783.50">&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::s..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (2,428 samples, 23.79%)</title><rect x="73.8632%" y="757" width="23.7946%" height="15" fill="rgb(221,13,50)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="767.50">alloc::vec::Vec&lt;T,A&gt;::extend_trusted</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2,428 samples, 23.79%)</title><rect x="73.8632%" y="741" width="23.7946%" height="15" fill="rgb(236,68,49)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="751.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,428 samples, 23.79%)</title><rect x="73.8632%" y="725" width="23.7946%" height="15" fill="rgb(229,146,28)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="735.50">&lt;core::iter::adapters::map::Map&lt;I,F&gt; a..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,428 samples, 23.79%)</title><rect x="73.8632%" y="709" width="23.7946%" height="15" fill="rgb(225,31,38)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="719.50">&lt;core::slice::iter::Iter&lt;T&gt; as core::i..</text></g><g><title>core::iter::adapters::map::map_fold::_{{closure}} (2,428 samples, 23.79%)</title><rect x="73.8632%" y="693" width="23.7946%" height="15" fill="rgb(250,208,3)" fg:x="7537" fg:w="2428"/><text x="74.1132%" y="703.50">core::iter::adapters::map::map_fold::_..</text></g><g><title>genetic_algorithm::GA::mutation::_{{closure}} (2,421 samples, 23.73%)</title><rect x="73.9318%" y="677" width="23.7260%" height="15" fill="rgb(246,54,23)" fg:x="7544" fg:w="2421"/><text x="74.1818%" y="687.50">genetic_algorithm::GA::mutation::_{{cl..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (2,421 samples, 23.73%)</title><rect x="73.9318%" y="661" width="23.7260%" height="15" fill="rgb(243,76,11)" fg:x="7544" fg:w="2421"/><text x="74.1818%" y="671.50">core::iter::traits::iterator::Iterator..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2,421 samples, 23.73%)</title><rect x="73.9318%" y="645" width="23.7260%" height="15" fill="rgb(245,21,50)" fg:x="7544" fg:w="2421"/><text x="74.1818%" y="655.50">&lt;alloc::vec::Vec&lt;T&gt; as core::iter::tra..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,421 samples, 23.73%)</title><rect x="73.9318%" y="629" width="23.7260%" height="15" fill="rgb(228,9,43)" fg:x="7544" fg:w="2421"/><text x="74.1818%" y="639.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2,415 samples, 23.67%)</title><rect x="73.9906%" y="613" width="23.6672%" height="15" fill="rgb(208,100,47)" fg:x="7550" fg:w="2415"/><text x="74.2406%" y="623.50">&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spe..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (145 samples, 1.42%)</title><rect x="96.2368%" y="597" width="1.4210%" height="15" fill="rgb(232,26,8)" fg:x="9820" fg:w="145"/><text x="96.4868%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (145 samples, 1.42%)</title><rect x="96.2368%" y="581" width="1.4210%" height="15" fill="rgb(216,166,38)" fg:x="9820" fg:w="145"/><text x="96.4868%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (144 samples, 1.41%)</title><rect x="96.2466%" y="565" width="1.4112%" height="15" fill="rgb(251,202,51)" fg:x="9821" fg:w="144"/><text x="96.4966%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (144 samples, 1.41%)</title><rect x="96.2466%" y="549" width="1.4112%" height="15" fill="rgb(254,216,34)" fg:x="9821" fg:w="144"/><text x="96.4966%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (141 samples, 1.38%)</title><rect x="96.2760%" y="533" width="1.3818%" height="15" fill="rgb(251,32,27)" fg:x="9824" fg:w="141"/><text x="96.5260%" y="543.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (141 samples, 1.38%)</title><rect x="96.2760%" y="517" width="1.3818%" height="15" fill="rgb(208,127,28)" fg:x="9824" fg:w="141"/><text x="96.5260%" y="527.50"></text></g><g><title>alloc::alloc::alloc (141 samples, 1.38%)</title><rect x="96.2760%" y="501" width="1.3818%" height="15" fill="rgb(224,137,22)" fg:x="9824" fg:w="141"/><text x="96.5260%" y="511.50"></text></g><g><title>malloc (138 samples, 1.35%)</title><rect x="96.3054%" y="485" width="1.3524%" height="15" fill="rgb(254,70,32)" fg:x="9827" fg:w="138"/><text x="96.5554%" y="495.50"></text></g><g><title>[libc.so.6] (118 samples, 1.16%)</title><rect x="96.5014%" y="469" width="1.1564%" height="15" fill="rgb(229,75,37)" fg:x="9847" fg:w="118"/><text x="96.7514%" y="479.50"></text></g><g><title>[libc.so.6] (17 samples, 0.17%)</title><rect x="97.4912%" y="453" width="0.1666%" height="15" fill="rgb(252,64,23)" fg:x="9948" fg:w="17"/><text x="97.7412%" y="463.50"></text></g><g><title>core::ops::function::FnOnce::call_once (4 samples, 0.04%)</title><rect x="97.7264%" y="837" width="0.0392%" height="15" fill="rgb(232,162,48)" fg:x="9972" fg:w="4"/><text x="97.9764%" y="847.50"></text></g><g><title>genetic_algorithm::GA::selection::_{{closure}} (4 samples, 0.04%)</title><rect x="97.7264%" y="821" width="0.0392%" height="15" fill="rgb(246,160,12)" fg:x="9972" fg:w="4"/><text x="97.9764%" y="831.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (2 samples, 0.02%)</title><rect x="97.7852%" y="725" width="0.0196%" height="15" fill="rgb(247,166,0)" fg:x="9978" fg:w="2"/><text x="98.0352%" y="735.50"></text></g><g><title>rand_chacha::guts::round (4 samples, 0.04%)</title><rect x="97.8244%" y="613" width="0.0392%" height="15" fill="rgb(249,219,21)" fg:x="9982" fg:w="4"/><text x="98.0744%" y="623.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (2 samples, 0.02%)</title><rect x="97.8440%" y="597" width="0.0196%" height="15" fill="rgb(205,209,3)" fg:x="9984" fg:w="2"/><text x="98.0940%" y="607.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (2 samples, 0.02%)</title><rect x="97.8440%" y="581" width="0.0196%" height="15" fill="rgb(243,44,1)" fg:x="9984" fg:w="2"/><text x="98.0940%" y="591.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (7 samples, 0.07%)</title><rect x="97.8048%" y="693" width="0.0686%" height="15" fill="rgb(206,159,16)" fg:x="9980" fg:w="7"/><text x="98.0548%" y="703.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (7 samples, 0.07%)</title><rect x="97.8048%" y="677" width="0.0686%" height="15" fill="rgb(244,77,30)" fg:x="9980" fg:w="7"/><text x="98.0548%" y="687.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (6 samples, 0.06%)</title><rect x="97.8146%" y="661" width="0.0588%" height="15" fill="rgb(218,69,12)" fg:x="9981" fg:w="6"/><text x="98.0646%" y="671.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (6 samples, 0.06%)</title><rect x="97.8146%" y="645" width="0.0588%" height="15" fill="rgb(212,87,7)" fg:x="9981" fg:w="6"/><text x="98.0646%" y="655.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (6 samples, 0.06%)</title><rect x="97.8146%" y="629" width="0.0588%" height="15" fill="rgb(245,114,25)" fg:x="9981" fg:w="6"/><text x="98.0646%" y="639.50"></text></g><g><title>rand::rng::Rng::gen (12 samples, 0.12%)</title><rect x="97.7656%" y="837" width="0.1176%" height="15" fill="rgb(210,61,42)" fg:x="9976" fg:w="12"/><text x="98.0156%" y="847.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (12 samples, 0.12%)</title><rect x="97.7656%" y="821" width="0.1176%" height="15" fill="rgb(211,52,33)" fg:x="9976" fg:w="12"/><text x="98.0156%" y="831.50"></text></g><g><title>rand::rng::Rng::gen (11 samples, 0.11%)</title><rect x="97.7754%" y="805" width="0.1078%" height="15" fill="rgb(234,58,33)" fg:x="9977" fg:w="11"/><text x="98.0254%" y="815.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (11 samples, 0.11%)</title><rect x="97.7754%" y="789" width="0.1078%" height="15" fill="rgb(220,115,36)" fg:x="9977" fg:w="11"/><text x="98.0254%" y="799.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (11 samples, 0.11%)</title><rect x="97.7754%" y="773" width="0.1078%" height="15" fill="rgb(243,153,54)" fg:x="9977" fg:w="11"/><text x="98.0254%" y="783.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (11 samples, 0.11%)</title><rect x="97.7754%" y="757" width="0.1078%" height="15" fill="rgb(251,47,18)" fg:x="9977" fg:w="11"/><text x="98.0254%" y="767.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (11 samples, 0.11%)</title><rect x="97.7754%" y="741" width="0.1078%" height="15" fill="rgb(242,102,42)" fg:x="9977" fg:w="11"/><text x="98.0254%" y="751.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (8 samples, 0.08%)</title><rect x="97.8048%" y="725" width="0.0784%" height="15" fill="rgb(234,31,38)" fg:x="9980" fg:w="8"/><text x="98.0548%" y="735.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (8 samples, 0.08%)</title><rect x="97.8048%" y="709" width="0.0784%" height="15" fill="rgb(221,117,51)" fg:x="9980" fg:w="8"/><text x="98.0548%" y="719.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64::_{{closure}} (2 samples, 0.02%)</title><rect x="98.0106%" y="693" width="0.0196%" height="15" fill="rgb(212,20,18)" fg:x="10001" fg:w="2"/><text x="98.2606%" y="703.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="98.0596%" y="565" width="0.0196%" height="15" fill="rgb(245,133,36)" fg:x="10006" fg:w="2"/><text x="98.3096%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words2301 (2 samples, 0.02%)</title><rect x="98.0596%" y="549" width="0.0196%" height="15" fill="rgb(212,6,19)" fg:x="10006" fg:w="2"/><text x="98.3096%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.02%)</title><rect x="98.0596%" y="533" width="0.0196%" height="15" fill="rgb(218,1,36)" fg:x="10006" fg:w="2"/><text x="98.3096%" y="543.50"></text></g><g><title>rand_chacha::guts::diagonalize (7 samples, 0.07%)</title><rect x="98.0596%" y="581" width="0.0686%" height="15" fill="rgb(246,84,54)" fg:x="10006" fg:w="7"/><text x="98.3096%" y="591.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (5 samples, 0.05%)</title><rect x="98.0792%" y="565" width="0.0490%" height="15" fill="rgb(242,110,6)" fg:x="10008" fg:w="5"/><text x="98.3292%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words3012 (5 samples, 0.05%)</title><rect x="98.0792%" y="549" width="0.0490%" height="15" fill="rgb(214,47,5)" fg:x="10008" fg:w="5"/><text x="98.3292%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (5 samples, 0.05%)</title><rect x="98.0792%" y="533" width="0.0490%" height="15" fill="rgb(218,159,25)" fg:x="10008" fg:w="5"/><text x="98.3292%" y="543.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as core::ops::arith::AddAssign&gt;::add_assign (4 samples, 0.04%)</title><rect x="98.1282%" y="565" width="0.0392%" height="15" fill="rgb(215,211,28)" fg:x="10013" fg:w="4"/><text x="98.3782%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::AddAssign&gt;::add_assign (4 samples, 0.04%)</title><rect x="98.1282%" y="549" width="0.0392%" height="15" fill="rgb(238,59,32)" fg:x="10013" fg:w="4"/><text x="98.3782%" y="559.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as core::ops::arith::Add&gt;::add (4 samples, 0.04%)</title><rect x="98.1282%" y="533" width="0.0392%" height="15" fill="rgb(226,82,3)" fg:x="10013" fg:w="4"/><text x="98.3782%" y="543.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_add_epi32 (4 samples, 0.04%)</title><rect x="98.1282%" y="517" width="0.0392%" height="15" fill="rgb(240,164,32)" fg:x="10013" fg:w="4"/><text x="98.3782%" y="527.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (3 samples, 0.03%)</title><rect x="98.1674%" y="565" width="0.0294%" height="15" fill="rgb(232,46,7)" fg:x="10017" fg:w="3"/><text x="98.4174%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right16 (3 samples, 0.03%)</title><rect x="98.1674%" y="549" width="0.0294%" height="15" fill="rgb(229,129,53)" fg:x="10017" fg:w="3"/><text x="98.4174%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (3 samples, 0.03%)</title><rect x="98.1674%" y="533" width="0.0294%" height="15" fill="rgb(234,188,29)" fg:x="10017" fg:w="3"/><text x="98.4174%" y="543.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (6 samples, 0.06%)</title><rect x="98.1968%" y="565" width="0.0588%" height="15" fill="rgb(246,141,4)" fg:x="10020" fg:w="6"/><text x="98.4468%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right20 (6 samples, 0.06%)</title><rect x="98.1968%" y="549" width="0.0588%" height="15" fill="rgb(229,23,39)" fg:x="10020" fg:w="6"/><text x="98.4468%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (6 samples, 0.06%)</title><rect x="98.1968%" y="533" width="0.0588%" height="15" fill="rgb(206,12,3)" fg:x="10020" fg:w="6"/><text x="98.4468%" y="543.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (3 samples, 0.03%)</title><rect x="98.2556%" y="565" width="0.0294%" height="15" fill="rgb(252,226,20)" fg:x="10026" fg:w="3"/><text x="98.5056%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right24 (3 samples, 0.03%)</title><rect x="98.2556%" y="549" width="0.0294%" height="15" fill="rgb(216,123,35)" fg:x="10026" fg:w="3"/><text x="98.5056%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi8 (3 samples, 0.03%)</title><rect x="98.2556%" y="533" width="0.0294%" height="15" fill="rgb(212,68,40)" fg:x="10026" fg:w="3"/><text x="98.5056%" y="543.50"></text></g><g><title>rand_chacha::guts::round (19 samples, 0.19%)</title><rect x="98.1282%" y="581" width="0.1862%" height="15" fill="rgb(254,125,32)" fg:x="10013" fg:w="19"/><text x="98.3782%" y="591.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3 samples, 0.03%)</title><rect x="98.2850%" y="565" width="0.0294%" height="15" fill="rgb(253,97,22)" fg:x="10029" fg:w="3"/><text x="98.5350%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::RotateEachWord32&gt;::rotate_each_word_right25 (3 samples, 0.03%)</title><rect x="98.2850%" y="549" width="0.0294%" height="15" fill="rgb(241,101,14)" fg:x="10029" fg:w="3"/><text x="98.5350%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_or_si256 (3 samples, 0.03%)</title><rect x="98.2850%" y="533" width="0.0294%" height="15" fill="rgb(238,103,29)" fg:x="10029" fg:w="3"/><text x="98.5350%" y="543.50"></text></g><g><title>genetic_algorithm::GA::selection (69 samples, 0.68%)</title><rect x="97.6578%" y="853" width="0.6762%" height="15" fill="rgb(233,195,47)" fg:x="9965" fg:w="69"/><text x="97.9078%" y="863.50"></text></g><g><title>rand::rng::Rng::gen_range (46 samples, 0.45%)</title><rect x="97.8832%" y="837" width="0.4508%" height="15" fill="rgb(246,218,30)" fg:x="9988" fg:w="46"/><text x="98.1332%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (46 samples, 0.45%)</title><rect x="97.8832%" y="821" width="0.4508%" height="15" fill="rgb(219,145,47)" fg:x="9988" fg:w="46"/><text x="98.1332%" y="831.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single (46 samples, 0.45%)</title><rect x="97.8832%" y="805" width="0.4508%" height="15" fill="rgb(243,12,26)" fg:x="9988" fg:w="46"/><text x="98.1332%" y="815.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;usize&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (46 samples, 0.45%)</title><rect x="97.8832%" y="789" width="0.4508%" height="15" fill="rgb(214,87,16)" fg:x="9988" fg:w="46"/><text x="98.1332%" y="799.50"></text></g><g><title>rand::rng::Rng::gen (44 samples, 0.43%)</title><rect x="97.9028%" y="773" width="0.4312%" height="15" fill="rgb(208,99,42)" fg:x="9990" fg:w="44"/><text x="98.1528%" y="783.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;usize&gt; for rand::distributions::Standard&gt;::sample (44 samples, 0.43%)</title><rect x="97.9028%" y="757" width="0.4312%" height="15" fill="rgb(253,99,2)" fg:x="9990" fg:w="44"/><text x="98.1528%" y="767.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (44 samples, 0.43%)</title><rect x="97.9028%" y="741" width="0.4312%" height="15" fill="rgb(220,168,23)" fg:x="9990" fg:w="44"/><text x="98.1528%" y="751.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (44 samples, 0.43%)</title><rect x="97.9028%" y="725" width="0.4312%" height="15" fill="rgb(242,38,24)" fg:x="9990" fg:w="44"/><text x="98.1528%" y="735.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (44 samples, 0.43%)</title><rect x="97.9028%" y="709" width="0.4312%" height="15" fill="rgb(225,182,9)" fg:x="9990" fg:w="44"/><text x="98.1528%" y="719.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (31 samples, 0.30%)</title><rect x="98.0302%" y="693" width="0.3038%" height="15" fill="rgb(243,178,37)" fg:x="10003" fg:w="31"/><text x="98.2802%" y="703.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (31 samples, 0.30%)</title><rect x="98.0302%" y="677" width="0.3038%" height="15" fill="rgb(232,139,19)" fg:x="10003" fg:w="31"/><text x="98.2802%" y="687.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (30 samples, 0.29%)</title><rect x="98.0400%" y="661" width="0.2940%" height="15" fill="rgb(225,201,24)" fg:x="10004" fg:w="30"/><text x="98.2900%" y="671.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (30 samples, 0.29%)</title><rect x="98.0400%" y="645" width="0.2940%" height="15" fill="rgb(221,47,46)" fg:x="10004" fg:w="30"/><text x="98.2900%" y="655.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (30 samples, 0.29%)</title><rect x="98.0400%" y="629" width="0.2940%" height="15" fill="rgb(249,23,13)" fg:x="10004" fg:w="30"/><text x="98.2900%" y="639.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (30 samples, 0.29%)</title><rect x="98.0400%" y="613" width="0.2940%" height="15" fill="rgb(219,9,5)" fg:x="10004" fg:w="30"/><text x="98.2900%" y="623.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (30 samples, 0.29%)</title><rect x="98.0400%" y="597" width="0.2940%" height="15" fill="rgb(254,171,16)" fg:x="10004" fg:w="30"/><text x="98.2900%" y="607.50"></text></g><g><title>rand_chacha::guts::undiagonalize (2 samples, 0.02%)</title><rect x="98.3144%" y="581" width="0.0196%" height="15" fill="rgb(230,171,20)" fg:x="10032" fg:w="2"/><text x="98.5644%" y="591.50"></text></g><g><title>&lt;ppv_lite86::soft::x2&lt;W,G&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (2 samples, 0.02%)</title><rect x="98.3144%" y="565" width="0.0196%" height="15" fill="rgb(210,71,41)" fg:x="10032" fg:w="2"/><text x="98.5644%" y="575.50"></text></g><g><title>&lt;ppv_lite86::x86_64::sse2::avx2::u32x4x2_avx2&lt;NI&gt; as ppv_lite86::types::LaneWords4&gt;::shuffle_lane_words1230 (2 samples, 0.02%)</title><rect x="98.3144%" y="549" width="0.0196%" height="15" fill="rgb(206,173,20)" fg:x="10032" fg:w="2"/><text x="98.5644%" y="559.50"></text></g><g><title>core::core_arch::x86::avx2::_mm256_shuffle_epi32 (2 samples, 0.02%)</title><rect x="98.3144%" y="533" width="0.0196%" height="15" fill="rgb(233,88,34)" fg:x="10032" fg:w="2"/><text x="98.5644%" y="543.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="98.4026%" y="837" width="0.0196%" height="15" fill="rgb(223,209,46)" fg:x="10041" fg:w="2"/><text x="98.6526%" y="847.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 0.06%)</title><rect x="98.4222%" y="773" width="0.0588%" height="15" fill="rgb(250,43,18)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="783.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 0.06%)</title><rect x="98.4222%" y="757" width="0.0588%" height="15" fill="rgb(208,13,10)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 0.06%)</title><rect x="98.4222%" y="741" width="0.0588%" height="15" fill="rgb(212,200,36)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 0.06%)</title><rect x="98.4222%" y="725" width="0.0588%" height="15" fill="rgb(225,90,30)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="735.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 0.06%)</title><rect x="98.4222%" y="709" width="0.0588%" height="15" fill="rgb(236,182,39)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="719.50"></text></g><g><title>alloc::alloc::alloc (6 samples, 0.06%)</title><rect x="98.4222%" y="693" width="0.0588%" height="15" fill="rgb(212,144,35)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="703.50"></text></g><g><title>malloc (6 samples, 0.06%)</title><rect x="98.4222%" y="677" width="0.0588%" height="15" fill="rgb(228,63,44)" fg:x="10043" fg:w="6"/><text x="98.6722%" y="687.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="98.4418%" y="661" width="0.0392%" height="15" fill="rgb(228,109,6)" fg:x="10045" fg:w="4"/><text x="98.6918%" y="671.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 0.08%)</title><rect x="98.4222%" y="837" width="0.0784%" height="15" fill="rgb(238,117,24)" fg:x="10043" fg:w="8"/><text x="98.6722%" y="847.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 0.08%)</title><rect x="98.4222%" y="821" width="0.0784%" height="15" fill="rgb(242,26,26)" fg:x="10043" fg:w="8"/><text x="98.6722%" y="831.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 0.08%)</title><rect x="98.4222%" y="805" width="0.0784%" height="15" fill="rgb(221,92,48)" fg:x="10043" fg:w="8"/><text x="98.6722%" y="815.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 0.08%)</title><rect x="98.4222%" y="789" width="0.0784%" height="15" fill="rgb(209,209,32)" fg:x="10043" fg:w="8"/><text x="98.6722%" y="799.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (2 samples, 0.02%)</title><rect x="98.4810%" y="773" width="0.0196%" height="15" fill="rgb(221,70,22)" fg:x="10049" fg:w="2"/><text x="98.7310%" y="783.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.02%)</title><rect x="98.4810%" y="757" width="0.0196%" height="15" fill="rgb(248,145,5)" fg:x="10049" fg:w="2"/><text x="98.7310%" y="767.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="98.4810%" y="741" width="0.0196%" height="15" fill="rgb(226,116,26)" fg:x="10049" fg:w="2"/><text x="98.7310%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.03%)</title><rect x="98.5104%" y="837" width="0.0294%" height="15" fill="rgb(244,5,17)" fg:x="10052" fg:w="3"/><text x="98.7604%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="98.5104%" y="821" width="0.0294%" height="15" fill="rgb(252,159,33)" fg:x="10052" fg:w="3"/><text x="98.7604%" y="831.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="98.5104%" y="805" width="0.0294%" height="15" fill="rgb(206,71,0)" fg:x="10052" fg:w="3"/><text x="98.7604%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="98.5104%" y="789" width="0.0294%" height="15" fill="rgb(233,118,54)" fg:x="10052" fg:w="3"/><text x="98.7604%" y="799.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (2 samples, 0.02%)</title><rect x="98.5202%" y="773" width="0.0196%" height="15" fill="rgb(234,83,48)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="98.5202%" y="757" width="0.0196%" height="15" fill="rgb(228,3,54)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="767.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (2 samples, 0.02%)</title><rect x="98.5202%" y="741" width="0.0196%" height="15" fill="rgb(226,155,13)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (2 samples, 0.02%)</title><rect x="98.5202%" y="725" width="0.0196%" height="15" fill="rgb(241,28,37)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="735.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.02%)</title><rect x="98.5202%" y="709" width="0.0196%" height="15" fill="rgb(233,93,10)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="719.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.02%)</title><rect x="98.5202%" y="693" width="0.0196%" height="15" fill="rgb(225,113,19)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="703.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.02%)</title><rect x="98.5202%" y="677" width="0.0196%" height="15" fill="rgb(241,2,18)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="687.50"></text></g><g><title>malloc (2 samples, 0.02%)</title><rect x="98.5202%" y="661" width="0.0196%" height="15" fill="rgb(228,207,21)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="671.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="98.5202%" y="645" width="0.0196%" height="15" fill="rgb(213,211,35)" fg:x="10053" fg:w="2"/><text x="98.7702%" y="655.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by (11 samples, 0.11%)</title><rect x="98.5398%" y="837" width="0.1078%" height="15" fill="rgb(209,83,10)" fg:x="10055" fg:w="11"/><text x="98.7898%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (11 samples, 0.11%)</title><rect x="98.5398%" y="821" width="0.1078%" height="15" fill="rgb(209,164,1)" fg:x="10055" fg:w="11"/><text x="98.7898%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (11 samples, 0.11%)</title><rect x="98.5398%" y="805" width="0.1078%" height="15" fill="rgb(213,184,43)" fg:x="10055" fg:w="11"/><text x="98.7898%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::max_by::fold::_{{closure}} (4 samples, 0.04%)</title><rect x="98.6084%" y="789" width="0.0392%" height="15" fill="rgb(231,61,34)" fg:x="10062" fg:w="4"/><text x="98.8584%" y="799.50"></text></g><g><title>core::cmp::max_by (4 samples, 0.04%)</title><rect x="98.6084%" y="773" width="0.0392%" height="15" fill="rgb(235,75,3)" fg:x="10062" fg:w="4"/><text x="98.8584%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.04%)</title><rect x="98.6084%" y="757" width="0.0392%" height="15" fill="rgb(220,106,47)" fg:x="10062" fg:w="4"/><text x="98.8584%" y="767.50"></text></g><g><title>genetic_algorithm::GA::update_best::_{{closure}} (4 samples, 0.04%)</title><rect x="98.6084%" y="741" width="0.0392%" height="15" fill="rgb(210,196,33)" fg:x="10062" fg:w="4"/><text x="98.8584%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (4 samples, 0.04%)</title><rect x="98.6084%" y="725" width="0.0392%" height="15" fill="rgb(229,154,42)" fg:x="10062" fg:w="4"/><text x="98.8584%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by (3 samples, 0.03%)</title><rect x="98.6476%" y="837" width="0.0294%" height="15" fill="rgb(228,114,26)" fg:x="10066" fg:w="3"/><text x="98.8976%" y="847.50"></text></g><g><title>core::iter::traits::iterator::Iterator::reduce (3 samples, 0.03%)</title><rect x="98.6476%" y="821" width="0.0294%" height="15" fill="rgb(208,144,1)" fg:x="10066" fg:w="3"/><text x="98.8976%" y="831.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="98.6476%" y="805" width="0.0294%" height="15" fill="rgb(239,112,37)" fg:x="10066" fg:w="3"/><text x="98.8976%" y="815.50"></text></g><g><title>core::iter::traits::iterator::Iterator::min_by::fold::_{{closure}} (2 samples, 0.02%)</title><rect x="98.6574%" y="789" width="0.0196%" height="15" fill="rgb(210,96,50)" fg:x="10067" fg:w="2"/><text x="98.9074%" y="799.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.02%)</title><rect x="98.6574%" y="773" width="0.0196%" height="15" fill="rgb(222,178,2)" fg:x="10067" fg:w="2"/><text x="98.9074%" y="783.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.02%)</title><rect x="98.6574%" y="757" width="0.0196%" height="15" fill="rgb(226,74,18)" fg:x="10067" fg:w="2"/><text x="98.9074%" y="767.50"></text></g><g><title>genetic_algorithm::GA::update_best::_{{closure}} (2 samples, 0.02%)</title><rect x="98.6574%" y="741" width="0.0196%" height="15" fill="rgb(225,67,54)" fg:x="10067" fg:w="2"/><text x="98.9074%" y="751.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for f64&gt;::partial_cmp (2 samples, 0.02%)</title><rect x="98.6574%" y="725" width="0.0196%" height="15" fill="rgb(251,92,32)" fg:x="10067" fg:w="2"/><text x="98.9074%" y="735.50"></text></g><g><title>genetic_algorithm::GA::update_best (36 samples, 0.35%)</title><rect x="98.3340%" y="853" width="0.3528%" height="15" fill="rgb(228,149,22)" fg:x="10034" fg:w="36"/><text x="98.5840%" y="863.50"></text></g><g><title>indicatif::progress_bar::ProgressBar::inc (2 samples, 0.02%)</title><rect x="98.6868%" y="853" width="0.0196%" height="15" fill="rgb(243,54,13)" fg:x="10070" fg:w="2"/><text x="98.9368%" y="863.50"></text></g><g><title>indicatif::draw_target::Drawable::draw (3 samples, 0.03%)</title><rect x="98.7554%" y="757" width="0.0294%" height="15" fill="rgb(243,180,28)" fg:x="10077" fg:w="3"/><text x="99.0054%" y="767.50"></text></g><g><title>indicatif::draw_target::DrawState::draw_to_term (3 samples, 0.03%)</title><rect x="98.7554%" y="741" width="0.0294%" height="15" fill="rgb(208,167,24)" fg:x="10077" fg:w="3"/><text x="99.0054%" y="751.50"></text></g><g><title>console::utils::measure_text_width (2 samples, 0.02%)</title><rect x="98.7652%" y="725" width="0.0196%" height="15" fill="rgb(245,73,45)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="735.50"></text></g><g><title>console::ansi::strip_ansi_codes (2 samples, 0.02%)</title><rect x="98.7652%" y="709" width="0.0196%" height="15" fill="rgb(237,203,48)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.02%)</title><rect x="98.7652%" y="693" width="0.0196%" height="15" fill="rgb(211,197,16)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;str&gt;&gt;::from_iter (2 samples, 0.02%)</title><rect x="98.7652%" y="677" width="0.0196%" height="15" fill="rgb(243,99,51)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="687.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend (2 samples, 0.02%)</title><rect x="98.7652%" y="661" width="0.0196%" height="15" fill="rgb(215,123,29)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.02%)</title><rect x="98.7652%" y="645" width="0.0196%" height="15" fill="rgb(239,186,37)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="655.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2 samples, 0.02%)</title><rect x="98.7652%" y="629" width="0.0196%" height="15" fill="rgb(252,136,39)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.02%)</title><rect x="98.7652%" y="613" width="0.0196%" height="15" fill="rgb(223,213,32)" fg:x="10078" fg:w="2"/><text x="99.0152%" y="623.50"></text></g><g><title>ioctl (2 samples, 0.02%)</title><rect x="98.7848%" y="677" width="0.0196%" height="15" fill="rgb(233,115,5)" fg:x="10080" fg:w="2"/><text x="99.0348%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="98.7848%" y="661" width="0.0196%" height="15" fill="rgb(207,226,44)" fg:x="10080" fg:w="2"/><text x="99.0348%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="98.7848%" y="645" width="0.0196%" height="15" fill="rgb(208,126,0)" fg:x="10080" fg:w="2"/><text x="99.0348%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="98.7848%" y="629" width="0.0196%" height="15" fill="rgb(244,66,21)" fg:x="10080" fg:w="2"/><text x="99.0348%" y="639.50"></text></g><g><title>indicatif::draw_target::Drawable::draw (10 samples, 0.10%)</title><rect x="98.7456%" y="789" width="0.0980%" height="15" fill="rgb(222,97,12)" fg:x="10076" fg:w="10"/><text x="98.9956%" y="799.50"></text></g><g><title>indicatif::multi::MultiState::draw (10 samples, 0.10%)</title><rect x="98.7456%" y="773" width="0.0980%" height="15" fill="rgb(219,213,19)" fg:x="10076" fg:w="10"/><text x="98.9956%" y="783.50"></text></g><g><title>indicatif::multi::MultiState::width (6 samples, 0.06%)</title><rect x="98.7848%" y="757" width="0.0588%" height="15" fill="rgb(252,169,30)" fg:x="10080" fg:w="6"/><text x="99.0348%" y="767.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (6 samples, 0.06%)</title><rect x="98.7848%" y="741" width="0.0588%" height="15" fill="rgb(206,32,51)" fg:x="10080" fg:w="6"/><text x="99.0348%" y="751.50"></text></g><g><title>console::term::Term::size (6 samples, 0.06%)</title><rect x="98.7848%" y="725" width="0.0588%" height="15" fill="rgb(250,172,42)" fg:x="10080" fg:w="6"/><text x="99.0348%" y="735.50"></text></g><g><title>console::term::Term::size_checked (6 samples, 0.06%)</title><rect x="98.7848%" y="709" width="0.0588%" height="15" fill="rgb(209,34,43)" fg:x="10080" fg:w="6"/><text x="99.0348%" y="719.50"></text></g><g><title>console::unix_term::terminal_size (6 samples, 0.06%)</title><rect x="98.7848%" y="693" width="0.0588%" height="15" fill="rgb(223,11,35)" fg:x="10080" fg:w="6"/><text x="99.0348%" y="703.50"></text></g><g><title>isatty (4 samples, 0.04%)</title><rect x="98.8044%" y="677" width="0.0392%" height="15" fill="rgb(251,219,26)" fg:x="10082" fg:w="4"/><text x="99.0544%" y="687.50"></text></g><g><title>tcgetattr (4 samples, 0.04%)</title><rect x="98.8044%" y="661" width="0.0392%" height="15" fill="rgb(231,119,3)" fg:x="10082" fg:w="4"/><text x="99.0544%" y="671.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.8044%" y="645" width="0.0392%" height="15" fill="rgb(216,97,11)" fg:x="10082" fg:w="4"/><text x="99.0544%" y="655.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="98.8044%" y="629" width="0.0392%" height="15" fill="rgb(223,59,9)" fg:x="10082" fg:w="4"/><text x="99.0544%" y="639.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.8142%" y="613" width="0.0294%" height="15" fill="rgb(233,93,31)" fg:x="10083" fg:w="3"/><text x="99.0642%" y="623.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.8142%" y="597" width="0.0294%" height="15" fill="rgb(239,81,33)" fg:x="10083" fg:w="3"/><text x="99.0642%" y="607.50"></text></g><g><title>ioctl (3 samples, 0.03%)</title><rect x="98.8534%" y="693" width="0.0294%" height="15" fill="rgb(213,120,34)" fg:x="10087" fg:w="3"/><text x="99.1034%" y="703.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.8534%" y="677" width="0.0294%" height="15" fill="rgb(243,49,53)" fg:x="10087" fg:w="3"/><text x="99.1034%" y="687.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.8534%" y="661" width="0.0294%" height="15" fill="rgb(247,216,33)" fg:x="10087" fg:w="3"/><text x="99.1034%" y="671.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="98.8534%" y="645" width="0.0294%" height="15" fill="rgb(226,26,14)" fg:x="10087" fg:w="3"/><text x="99.1034%" y="655.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (12 samples, 0.12%)</title><rect x="98.8436%" y="789" width="0.1176%" height="15" fill="rgb(215,49,53)" fg:x="10086" fg:w="12"/><text x="99.0936%" y="799.50"></text></g><g><title>indicatif::multi::MultiState::width (12 samples, 0.12%)</title><rect x="98.8436%" y="773" width="0.1176%" height="15" fill="rgb(245,162,40)" fg:x="10086" fg:w="12"/><text x="99.0936%" y="783.50"></text></g><g><title>indicatif::draw_target::ProgressDrawTarget::width (12 samples, 0.12%)</title><rect x="98.8436%" y="757" width="0.1176%" height="15" fill="rgb(229,68,17)" fg:x="10086" fg:w="12"/><text x="99.0936%" y="767.50"></text></g><g><title>console::term::Term::size (11 samples, 0.11%)</title><rect x="98.8534%" y="741" width="0.1078%" height="15" fill="rgb(213,182,10)" fg:x="10087" fg:w="11"/><text x="99.1034%" y="751.50"></text></g><g><title>console::term::Term::size_checked (11 samples, 0.11%)</title><rect x="98.8534%" y="725" width="0.1078%" height="15" fill="rgb(245,125,30)" fg:x="10087" fg:w="11"/><text x="99.1034%" y="735.50"></text></g><g><title>console::unix_term::terminal_size (11 samples, 0.11%)</title><rect x="98.8534%" y="709" width="0.1078%" height="15" fill="rgb(232,202,2)" fg:x="10087" fg:w="11"/><text x="99.1034%" y="719.50"></text></g><g><title>isatty (8 samples, 0.08%)</title><rect x="98.8828%" y="693" width="0.0784%" height="15" fill="rgb(237,140,51)" fg:x="10090" fg:w="8"/><text x="99.1328%" y="703.50"></text></g><g><title>tcgetattr (8 samples, 0.08%)</title><rect x="98.8828%" y="677" width="0.0784%" height="15" fill="rgb(236,157,25)" fg:x="10090" fg:w="8"/><text x="99.1328%" y="687.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="98.8828%" y="661" width="0.0784%" height="15" fill="rgb(219,209,0)" fg:x="10090" fg:w="8"/><text x="99.1328%" y="671.50"></text></g><g><title>[unknown] (8 samples, 0.08%)</title><rect x="98.8828%" y="645" width="0.0784%" height="15" fill="rgb(240,116,54)" fg:x="10090" fg:w="8"/><text x="99.1328%" y="655.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="98.8926%" y="629" width="0.0686%" height="15" fill="rgb(216,10,36)" fg:x="10091" fg:w="7"/><text x="99.1426%" y="639.50"></text></g><g><title>[unknown] (7 samples, 0.07%)</title><rect x="98.8926%" y="613" width="0.0686%" height="15" fill="rgb(222,72,44)" fg:x="10091" fg:w="7"/><text x="99.1426%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="98.9416%" y="597" width="0.0196%" height="15" fill="rgb(232,159,9)" fg:x="10096" fg:w="2"/><text x="99.1916%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="98.9416%" y="581" width="0.0196%" height="15" fill="rgb(210,39,32)" fg:x="10096" fg:w="2"/><text x="99.1916%" y="591.50"></text></g><g><title>&lt;console::ansi::AnsiCodeIterator as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="98.9808%" y="565" width="0.0196%" height="15" fill="rgb(216,194,45)" fg:x="10100" fg:w="2"/><text x="99.2308%" y="575.50"></text></g><g><title>console::ansi::strip_ansi_codes (3 samples, 0.03%)</title><rect x="98.9808%" y="677" width="0.0294%" height="15" fill="rgb(218,18,35)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (3 samples, 0.03%)</title><rect x="98.9808%" y="661" width="0.0294%" height="15" fill="rgb(207,83,51)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="671.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;&amp;str&gt;&gt;::from_iter (3 samples, 0.03%)</title><rect x="98.9808%" y="645" width="0.0294%" height="15" fill="rgb(225,63,43)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;&amp;str&gt;&gt;::extend (3 samples, 0.03%)</title><rect x="98.9808%" y="629" width="0.0294%" height="15" fill="rgb(207,57,36)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="639.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (3 samples, 0.03%)</title><rect x="98.9808%" y="613" width="0.0294%" height="15" fill="rgb(216,99,33)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::filter_map::FilterMap&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (3 samples, 0.03%)</title><rect x="98.9808%" y="597" width="0.0294%" height="15" fill="rgb(225,42,16)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="607.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (3 samples, 0.03%)</title><rect x="98.9808%" y="581" width="0.0294%" height="15" fill="rgb(220,201,45)" fg:x="10100" fg:w="3"/><text x="99.2308%" y="591.50"></text></g><g><title>&lt;indicatif::style::PaddedStringDisplay as core::fmt::Display&gt;::fmt (6 samples, 0.06%)</title><rect x="98.9808%" y="709" width="0.0588%" height="15" fill="rgb(225,33,4)" fg:x="10100" fg:w="6"/><text x="99.2308%" y="719.50"></text></g><g><title>console::utils::measure_text_width (6 samples, 0.06%)</title><rect x="98.9808%" y="693" width="0.0588%" height="15" fill="rgb(224,33,50)" fg:x="10100" fg:w="6"/><text x="99.2308%" y="703.50"></text></g><g><title>console::utils::str_width (3 samples, 0.03%)</title><rect x="99.0102%" y="677" width="0.0294%" height="15" fill="rgb(246,198,51)" fg:x="10103" fg:w="3"/><text x="99.2602%" y="687.50"></text></g><g><title>&lt;str as unicode_width::UnicodeWidthStr&gt;::width (3 samples, 0.03%)</title><rect x="99.0102%" y="661" width="0.0294%" height="15" fill="rgb(205,22,4)" fg:x="10103" fg:w="3"/><text x="99.2602%" y="671.50"></text></g><g><title>unicode_width::str_width (3 samples, 0.03%)</title><rect x="99.0102%" y="645" width="0.0294%" height="15" fill="rgb(206,3,8)" fg:x="10103" fg:w="3"/><text x="99.2602%" y="655.50"></text></g><g><title>core::iter::traits::double_ended::DoubleEndedIterator::rfold (3 samples, 0.03%)</title><rect x="99.0102%" y="629" width="0.0294%" height="15" fill="rgb(251,23,15)" fg:x="10103" fg:w="3"/><text x="99.2602%" y="639.50"></text></g><g><title>unicode_width::str_width::_{{closure}} (2 samples, 0.02%)</title><rect x="99.0200%" y="613" width="0.0196%" height="15" fill="rgb(252,88,28)" fg:x="10104" fg:w="2"/><text x="99.2700%" y="623.50"></text></g><g><title>unicode_width::tables::charwidth::width (2 samples, 0.02%)</title><rect x="99.0200%" y="597" width="0.0196%" height="15" fill="rgb(212,127,14)" fg:x="10104" fg:w="2"/><text x="99.2700%" y="607.50"></text></g><g><title>unicode_width::tables::charwidth::lookup_width (2 samples, 0.02%)</title><rect x="99.0200%" y="581" width="0.0196%" height="15" fill="rgb(247,145,37)" fg:x="10104" fg:w="2"/><text x="99.2700%" y="591.50"></text></g><g><title>&lt;console::utils::StyledObject&lt;D&gt; as core::fmt::Display&gt;::fmt (12 samples, 0.12%)</title><rect x="98.9808%" y="725" width="0.1176%" height="15" fill="rgb(209,117,53)" fg:x="10100" fg:w="12"/><text x="99.2308%" y="735.50"></text></g><g><title>core::fmt::write (6 samples, 0.06%)</title><rect x="99.0396%" y="709" width="0.0588%" height="15" fill="rgb(212,90,42)" fg:x="10106" fg:w="6"/><text x="99.2896%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (4 samples, 0.04%)</title><rect x="99.0592%" y="693" width="0.0392%" height="15" fill="rgb(218,164,37)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="703.50"></text></g><g><title>alloc::string::String::push_str (4 samples, 0.04%)</title><rect x="99.0592%" y="677" width="0.0392%" height="15" fill="rgb(246,65,34)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="687.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (4 samples, 0.04%)</title><rect x="99.0592%" y="661" width="0.0392%" height="15" fill="rgb(231,100,33)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (4 samples, 0.04%)</title><rect x="99.0592%" y="645" width="0.0392%" height="15" fill="rgb(228,126,14)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="655.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (4 samples, 0.04%)</title><rect x="99.0592%" y="629" width="0.0392%" height="15" fill="rgb(215,173,21)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="99.0592%" y="613" width="0.0392%" height="15" fill="rgb(210,6,40)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="623.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (4 samples, 0.04%)</title><rect x="99.0592%" y="597" width="0.0392%" height="15" fill="rgb(212,48,18)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="607.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.04%)</title><rect x="99.0592%" y="581" width="0.0392%" height="15" fill="rgb(230,214,11)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (4 samples, 0.04%)</title><rect x="99.0592%" y="565" width="0.0392%" height="15" fill="rgb(254,105,39)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="575.50"></text></g><g><title>alloc::raw_vec::finish_grow (4 samples, 0.04%)</title><rect x="99.0592%" y="549" width="0.0392%" height="15" fill="rgb(245,158,5)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (4 samples, 0.04%)</title><rect x="99.0592%" y="533" width="0.0392%" height="15" fill="rgb(249,208,11)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="543.50"></text></g><g><title>alloc::alloc::Global::grow_impl (4 samples, 0.04%)</title><rect x="99.0592%" y="517" width="0.0392%" height="15" fill="rgb(210,39,28)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="527.50"></text></g><g><title>alloc::alloc::realloc (4 samples, 0.04%)</title><rect x="99.0592%" y="501" width="0.0392%" height="15" fill="rgb(211,56,53)" fg:x="10108" fg:w="4"/><text x="99.3092%" y="511.50"></text></g><g><title>realloc (3 samples, 0.03%)</title><rect x="99.0690%" y="485" width="0.0294%" height="15" fill="rgb(226,201,30)" fg:x="10109" fg:w="3"/><text x="99.3190%" y="495.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="99.0690%" y="469" width="0.0294%" height="15" fill="rgb(239,101,34)" fg:x="10109" fg:w="3"/><text x="99.3190%" y="479.50"></text></g><g><title>[libc.so.6] (2 samples, 0.02%)</title><rect x="99.0788%" y="453" width="0.0196%" height="15" fill="rgb(226,209,5)" fg:x="10110" fg:w="2"/><text x="99.3288%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (14 samples, 0.14%)</title><rect x="98.9808%" y="773" width="0.1372%" height="15" fill="rgb(250,105,47)" fg:x="10100" fg:w="14"/><text x="99.2308%" y="783.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write::write_fmt::SpecWriteFmt&gt;::spec_write_fmt (14 samples, 0.14%)</title><rect x="98.9808%" y="757" width="0.1372%" height="15" fill="rgb(230,72,3)" fg:x="10100" fg:w="14"/><text x="99.2308%" y="767.50"></text></g><g><title>core::fmt::write (14 samples, 0.14%)</title><rect x="98.9808%" y="741" width="0.1372%" height="15" fill="rgb(232,218,39)" fg:x="10100" fg:w="14"/><text x="99.2308%" y="751.50"></text></g><g><title>indicatif::state::BarState::draw (41 samples, 0.40%)</title><rect x="98.7456%" y="805" width="0.4018%" height="15" fill="rgb(248,166,6)" fg:x="10076" fg:w="41"/><text x="98.9956%" y="815.50"></text></g><g><title>indicatif::style::ProgressStyle::format_state (19 samples, 0.19%)</title><rect x="98.9612%" y="789" width="0.1862%" height="15" fill="rgb(247,89,20)" fg:x="10098" fg:w="19"/><text x="99.2112%" y="799.50"></text></g><g><title>indicatif::style::ProgressStyle::push_line (2 samples, 0.02%)</title><rect x="99.1278%" y="773" width="0.0196%" height="15" fill="rgb(248,130,54)" fg:x="10115" fg:w="2"/><text x="99.3778%" y="783.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.1278%" y="757" width="0.0196%" height="15" fill="rgb(234,196,4)" fg:x="10115" fg:w="2"/><text x="99.3778%" y="767.50"></text></g><g><title>&lt;core::str::iter::Split&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.02%)</title><rect x="99.1278%" y="741" width="0.0196%" height="15" fill="rgb(250,143,31)" fg:x="10115" fg:w="2"/><text x="99.3778%" y="751.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (2 samples, 0.02%)</title><rect x="99.1278%" y="725" width="0.0196%" height="15" fill="rgb(211,110,34)" fg:x="10115" fg:w="2"/><text x="99.3778%" y="735.50"></text></g><g><title>genetic_framework::Framework::run (10,015 samples, 98.15%)</title><rect x="1.0094%" y="885" width="98.1478%" height="15" fill="rgb(215,124,48)" fg:x="103" fg:w="10015"/><text x="1.2594%" y="895.50">genetic_framework::Framework::run</text></g><g><title>genetic_algorithm::GA::run (10,014 samples, 98.14%)</title><rect x="1.0192%" y="869" width="98.1380%" height="15" fill="rgb(216,46,13)" fg:x="104" fg:w="10014"/><text x="1.2692%" y="879.50">genetic_algorithm::GA::run</text></g><g><title>indicatif::progress_bar::ProgressBar::tick_inner (46 samples, 0.45%)</title><rect x="98.7064%" y="853" width="0.4508%" height="15" fill="rgb(205,184,25)" fg:x="10072" fg:w="46"/><text x="98.9564%" y="863.50"></text></g><g><title>indicatif::state::BarState::tick (43 samples, 0.42%)</title><rect x="98.7358%" y="837" width="0.4214%" height="15" fill="rgb(228,1,10)" fg:x="10075" fg:w="43"/><text x="98.9858%" y="847.50"></text></g><g><title>indicatif::state::BarState::update_estimate_and_draw (43 samples, 0.42%)</title><rect x="98.7358%" y="821" width="0.4214%" height="15" fill="rgb(213,116,27)" fg:x="10075" fg:w="43"/><text x="98.9858%" y="831.50"></text></g><g><title>inquire::prompts::select::Select&lt;T&gt;::prompt (2 samples, 0.02%)</title><rect x="99.1572%" y="885" width="0.0196%" height="15" fill="rgb(241,95,50)" fg:x="10118" fg:w="2"/><text x="99.4072%" y="895.50"></text></g><g><title>inquire::prompts::select::Select&lt;T&gt;::raw_prompt (2 samples, 0.02%)</title><rect x="99.1572%" y="869" width="0.0196%" height="15" fill="rgb(238,48,32)" fg:x="10118" fg:w="2"/><text x="99.4072%" y="879.50"></text></g><g><title>inquire::prompts::select::Select&lt;T&gt;::prompt_with_backend (2 samples, 0.02%)</title><rect x="99.1572%" y="853" width="0.0196%" height="15" fill="rgb(235,113,49)" fg:x="10118" fg:w="2"/><text x="99.4072%" y="863.50"></text></g><g><title>ga_cli (10,121 samples, 99.19%)</title><rect x="0.0000%" y="1205" width="99.1866%" height="15" fill="rgb(205,127,43)" fg:x="0" fg:w="10121"/><text x="0.2500%" y="1215.50">ga_cli</text></g><g><title>_start (10,033 samples, 98.32%)</title><rect x="0.8624%" y="1189" width="98.3242%" height="15" fill="rgb(250,162,2)" fg:x="88" fg:w="10033"/><text x="1.1124%" y="1199.50">_start</text></g><g><title>__libc_start_main (10,033 samples, 98.32%)</title><rect x="0.8624%" y="1173" width="98.3242%" height="15" fill="rgb(220,13,41)" fg:x="88" fg:w="10033"/><text x="1.1124%" y="1183.50">__libc_start_main</text></g><g><title>[libc.so.6] (10,033 samples, 98.32%)</title><rect x="0.8624%" y="1157" width="98.3242%" height="15" fill="rgb(249,221,25)" fg:x="88" fg:w="10033"/><text x="1.1124%" y="1167.50">[libc.so.6]</text></g><g><title>main (10,032 samples, 98.31%)</title><rect x="0.8722%" y="1141" width="98.3144%" height="15" fill="rgb(215,208,19)" fg:x="89" fg:w="10032"/><text x="1.1222%" y="1151.50">main</text></g><g><title>std::rt::lang_start_internal (10,032 samples, 98.31%)</title><rect x="0.8722%" y="1125" width="98.3144%" height="15" fill="rgb(236,175,2)" fg:x="89" fg:w="10032"/><text x="1.1222%" y="1135.50">std::rt::lang_start_internal</text></g><g><title>std::rt::lang_start::_{{closure}} (10,032 samples, 98.31%)</title><rect x="0.8722%" y="1109" width="98.3144%" height="15" fill="rgb(241,52,2)" fg:x="89" fg:w="10032"/><text x="1.1222%" y="1119.50">std::rt::lang_start::_{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (10,032 samples, 98.31%)</title><rect x="0.8722%" y="1093" width="98.3144%" height="15" fill="rgb(248,140,14)" fg:x="89" fg:w="10032"/><text x="1.1222%" y="1103.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (10,032 samples, 98.31%)</title><rect x="0.8722%" y="1077" width="98.3144%" height="15" fill="rgb(253,22,42)" fg:x="89" fg:w="10032"/><text x="1.1222%" y="1087.50">core::ops::function::FnOnce::call_once</text></g><g><title>ga_cli::main (10,032 samples, 98.31%)</title><rect x="0.8722%" y="1061" width="98.3144%" height="15" fill="rgb(234,61,47)" fg:x="89" fg:w="10032"/><text x="1.1222%" y="1071.50">ga_cli::main</text></g><g><title>tokio::runtime::runtime::Runtime::block_on (10,020 samples, 98.20%)</title><rect x="0.9898%" y="1045" width="98.1968%" height="15" fill="rgb(208,226,15)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="1055.50">tokio::runtime::runtime::Runtime::block_on</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on (10,020 samples, 98.20%)</title><rect x="0.9898%" y="1029" width="98.1968%" height="15" fill="rgb(217,221,4)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="1039.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on</text></g><g><title>tokio::runtime::context::runtime::enter_runtime (10,020 samples, 98.20%)</title><rect x="0.9898%" y="1013" width="98.1968%" height="15" fill="rgb(212,174,34)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="1023.50">tokio::runtime::context::runtime::enter_runtime</text></g><g><title>tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}} (10,020 samples, 98.20%)</title><rect x="0.9898%" y="997" width="98.1968%" height="15" fill="rgb(253,83,4)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="1007.50">tokio::runtime::scheduler::multi_thread::MultiThread::block_on::_{{closure}}</text></g><g><title>tokio::runtime::context::blocking::BlockingRegionGuard::block_on (10,020 samples, 98.20%)</title><rect x="0.9898%" y="981" width="98.1968%" height="15" fill="rgb(250,195,49)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="991.50">tokio::runtime::context::blocking::BlockingRegionGuard::block_on</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on (10,020 samples, 98.20%)</title><rect x="0.9898%" y="965" width="98.1968%" height="15" fill="rgb(241,192,25)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="975.50">tokio::runtime::park::CachedParkThread::block_on</text></g><g><title>tokio::runtime::coop::budget (10,020 samples, 98.20%)</title><rect x="0.9898%" y="949" width="98.1968%" height="15" fill="rgb(208,124,10)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="959.50">tokio::runtime::coop::budget</text></g><g><title>tokio::runtime::coop::with_budget (10,020 samples, 98.20%)</title><rect x="0.9898%" y="933" width="98.1968%" height="15" fill="rgb(222,33,0)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="943.50">tokio::runtime::coop::with_budget</text></g><g><title>tokio::runtime::park::CachedParkThread::block_on::_{{closure}} (10,020 samples, 98.20%)</title><rect x="0.9898%" y="917" width="98.1968%" height="15" fill="rgb(234,209,28)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="927.50">tokio::runtime::park::CachedParkThread::block_on::_{{closure}}</text></g><g><title>ga_cli::main::_{{closure}} (10,020 samples, 98.20%)</title><rect x="0.9898%" y="901" width="98.1968%" height="15" fill="rgb(224,11,23)" fg:x="101" fg:w="10020"/><text x="1.2398%" y="911.50">ga_cli::main::_{{closure}}</text></g><g><title>[libc.so.6] (6 samples, 0.06%)</title><rect x="99.2356%" y="1141" width="0.0588%" height="15" fill="rgb(232,99,1)" fg:x="10126" fg:w="6"/><text x="99.4856%" y="1151.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.2748%" y="1125" width="0.0196%" height="15" fill="rgb(237,95,45)" fg:x="10130" fg:w="2"/><text x="99.5248%" y="1135.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.2748%" y="1109" width="0.0196%" height="15" fill="rgb(208,109,11)" fg:x="10130" fg:w="2"/><text x="99.5248%" y="1119.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.2748%" y="1093" width="0.0196%" height="15" fill="rgb(216,190,48)" fg:x="10130" fg:w="2"/><text x="99.5248%" y="1103.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.2748%" y="1077" width="0.0196%" height="15" fill="rgb(251,171,36)" fg:x="10130" fg:w="2"/><text x="99.5248%" y="1087.50"></text></g><g><title>[libc.so.6] (13 samples, 0.13%)</title><rect x="99.1964%" y="1157" width="0.1274%" height="15" fill="rgb(230,62,22)" fg:x="10122" fg:w="13"/><text x="99.4464%" y="1167.50"></text></g><g><title>cfree (3 samples, 0.03%)</title><rect x="99.2944%" y="1141" width="0.0294%" height="15" fill="rgb(225,114,35)" fg:x="10132" fg:w="3"/><text x="99.5444%" y="1151.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="99.2944%" y="1125" width="0.0294%" height="15" fill="rgb(215,118,42)" fg:x="10132" fg:w="3"/><text x="99.5444%" y="1135.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="99.3238%" y="1157" width="0.0588%" height="15" fill="rgb(243,119,21)" fg:x="10135" fg:w="6"/><text x="99.5738%" y="1167.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="99.3238%" y="1141" width="0.0588%" height="15" fill="rgb(252,177,53)" fg:x="10135" fg:w="6"/><text x="99.5738%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="99.3238%" y="1125" width="0.0588%" height="15" fill="rgb(237,209,29)" fg:x="10135" fg:w="6"/><text x="99.5738%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.3434%" y="1109" width="0.0392%" height="15" fill="rgb(212,65,23)" fg:x="10137" fg:w="4"/><text x="99.5934%" y="1119.50"></text></g><g><title>__madvise (2 samples, 0.02%)</title><rect x="99.3826%" y="1157" width="0.0196%" height="15" fill="rgb(230,222,46)" fg:x="10141" fg:w="2"/><text x="99.6326%" y="1167.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.3826%" y="1141" width="0.0196%" height="15" fill="rgb(215,135,32)" fg:x="10141" fg:w="2"/><text x="99.6326%" y="1151.50"></text></g><g><title>__munmap (6 samples, 0.06%)</title><rect x="99.4022%" y="1141" width="0.0588%" height="15" fill="rgb(246,101,22)" fg:x="10143" fg:w="6"/><text x="99.6522%" y="1151.50"></text></g><g><title>[unknown] (6 samples, 0.06%)</title><rect x="99.4022%" y="1125" width="0.0588%" height="15" fill="rgb(206,107,13)" fg:x="10143" fg:w="6"/><text x="99.6522%" y="1135.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.4120%" y="1109" width="0.0490%" height="15" fill="rgb(250,100,44)" fg:x="10144" fg:w="5"/><text x="99.6620%" y="1119.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.4120%" y="1093" width="0.0490%" height="15" fill="rgb(231,147,38)" fg:x="10144" fg:w="5"/><text x="99.6620%" y="1103.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.4120%" y="1077" width="0.0490%" height="15" fill="rgb(229,8,40)" fg:x="10144" fg:w="5"/><text x="99.6620%" y="1087.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.4120%" y="1061" width="0.0490%" height="15" fill="rgb(221,135,30)" fg:x="10144" fg:w="5"/><text x="99.6620%" y="1071.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.4120%" y="1045" width="0.0490%" height="15" fill="rgb(249,193,18)" fg:x="10144" fg:w="5"/><text x="99.6620%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 0.05%)</title><rect x="99.4120%" y="1029" width="0.0490%" height="15" fill="rgb(209,133,39)" fg:x="10144" fg:w="5"/><text x="99.6620%" y="1039.50"></text></g><g><title>core::mem::drop (4 samples, 0.04%)</title><rect x="99.5100%" y="981" width="0.0392%" height="15" fill="rgb(232,100,14)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="991.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::loom::std::parking_lot::MutexGuard&lt;tokio::runtime::blocking::pool::Shared&gt;&gt; (4 samples, 0.04%)</title><rect x="99.5100%" y="965" width="0.0392%" height="15" fill="rgb(224,185,1)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="975.50"></text></g><g><title>core::ptr::drop_in_place&lt;lock_api::mutex::MutexGuard&lt;parking_lot::raw_mutex::RawMutex,tokio::runtime::blocking::pool::Shared&gt;&gt; (4 samples, 0.04%)</title><rect x="99.5100%" y="949" width="0.0392%" height="15" fill="rgb(223,139,8)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="959.50"></text></g><g><title>&lt;lock_api::mutex::MutexGuard&lt;R,T&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="99.5100%" y="933" width="0.0392%" height="15" fill="rgb(232,213,38)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="943.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::unlock (4 samples, 0.04%)</title><rect x="99.5100%" y="917" width="0.0392%" height="15" fill="rgb(207,94,22)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="927.50"></text></g><g><title>syscall (4 samples, 0.04%)</title><rect x="99.5100%" y="901" width="0.0392%" height="15" fill="rgb(219,183,54)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="911.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.5100%" y="885" width="0.0392%" height="15" fill="rgb(216,185,54)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="895.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.5100%" y="869" width="0.0392%" height="15" fill="rgb(254,217,39)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="879.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.5100%" y="853" width="0.0392%" height="15" fill="rgb(240,178,23)" fg:x="10154" fg:w="4"/><text x="99.7600%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5296%" y="837" width="0.0196%" height="15" fill="rgb(218,11,47)" fg:x="10156" fg:w="2"/><text x="99.7796%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5296%" y="821" width="0.0196%" height="15" fill="rgb(218,51,51)" fg:x="10156" fg:w="2"/><text x="99.7796%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5296%" y="805" width="0.0196%" height="15" fill="rgb(238,126,27)" fg:x="10156" fg:w="2"/><text x="99.7796%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5296%" y="789" width="0.0196%" height="15" fill="rgb(249,202,22)" fg:x="10156" fg:w="2"/><text x="99.7796%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5296%" y="773" width="0.0196%" height="15" fill="rgb(254,195,49)" fg:x="10156" fg:w="2"/><text x="99.7796%" y="783.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (2 samples, 0.02%)</title><rect x="99.5492%" y="885" width="0.0196%" height="15" fill="rgb(208,123,14)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="895.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.02%)</title><rect x="99.5492%" y="869" width="0.0196%" height="15" fill="rgb(224,200,8)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="879.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (2 samples, 0.02%)</title><rect x="99.5492%" y="853" width="0.0196%" height="15" fill="rgb(217,61,36)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="863.50"></text></g><g><title>syscall (2 samples, 0.02%)</title><rect x="99.5492%" y="837" width="0.0196%" height="15" fill="rgb(206,35,45)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="821" width="0.0196%" height="15" fill="rgb(217,65,33)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="805" width="0.0196%" height="15" fill="rgb(222,158,48)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="789" width="0.0196%" height="15" fill="rgb(254,2,54)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="773" width="0.0196%" height="15" fill="rgb(250,143,38)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="757" width="0.0196%" height="15" fill="rgb(248,25,0)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="741" width="0.0196%" height="15" fill="rgb(206,152,27)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="725" width="0.0196%" height="15" fill="rgb(240,77,30)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="709" width="0.0196%" height="15" fill="rgb(231,5,3)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5492%" y="693" width="0.0196%" height="15" fill="rgb(207,226,32)" fg:x="10158" fg:w="2"/><text x="99.7992%" y="703.50"></text></g><g><title>parking_lot_core::parking_lot::park (4 samples, 0.04%)</title><rect x="99.5492%" y="917" width="0.0392%" height="15" fill="rgb(222,207,47)" fg:x="10158" fg:w="4"/><text x="99.7992%" y="927.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (4 samples, 0.04%)</title><rect x="99.5492%" y="901" width="0.0392%" height="15" fill="rgb(229,115,45)" fg:x="10158" fg:w="4"/><text x="99.7992%" y="911.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="99.5688%" y="885" width="0.0196%" height="15" fill="rgb(224,191,6)" fg:x="10160" fg:w="2"/><text x="99.8188%" y="895.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data::THREAD_DATA::__getit (2 samples, 0.02%)</title><rect x="99.5688%" y="869" width="0.0196%" height="15" fill="rgb(230,227,24)" fg:x="10160" fg:w="2"/><text x="99.8188%" y="879.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="99.5688%" y="853" width="0.0196%" height="15" fill="rgb(228,80,19)" fg:x="10160" fg:w="2"/><text x="99.8188%" y="863.50"></text></g><g><title>std::sys::common::thread_local::fast_local::Key&lt;T&gt;::try_initialize (2 samples, 0.02%)</title><rect x="99.5688%" y="837" width="0.0196%" height="15" fill="rgb(247,229,0)" fg:x="10160" fg:w="2"/><text x="99.8188%" y="847.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (6 samples, 0.06%)</title><rect x="99.5492%" y="981" width="0.0588%" height="15" fill="rgb(237,194,15)" fg:x="10158" fg:w="6"/><text x="99.7992%" y="991.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (6 samples, 0.06%)</title><rect x="99.5492%" y="965" width="0.0588%" height="15" fill="rgb(219,203,20)" fg:x="10158" fg:w="6"/><text x="99.7992%" y="975.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (6 samples, 0.06%)</title><rect x="99.5492%" y="949" width="0.0588%" height="15" fill="rgb(234,128,8)" fg:x="10158" fg:w="6"/><text x="99.7992%" y="959.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (6 samples, 0.06%)</title><rect x="99.5492%" y="933" width="0.0588%" height="15" fill="rgb(248,202,8)" fg:x="10158" fg:w="6"/><text x="99.7992%" y="943.50"></text></g><g><title>parking_lot_core::spinwait::SpinWait::spin (2 samples, 0.02%)</title><rect x="99.5884%" y="917" width="0.0196%" height="15" fill="rgb(206,104,37)" fg:x="10162" fg:w="2"/><text x="99.8384%" y="927.50"></text></g><g><title>parking_lot_core::thread_parker::imp::thread_yield (2 samples, 0.02%)</title><rect x="99.5884%" y="901" width="0.0196%" height="15" fill="rgb(223,8,27)" fg:x="10162" fg:w="2"/><text x="99.8384%" y="911.50"></text></g><g><title>__sched_yield (2 samples, 0.02%)</title><rect x="99.5884%" y="885" width="0.0196%" height="15" fill="rgb(216,217,28)" fg:x="10162" fg:w="2"/><text x="99.8384%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5884%" y="869" width="0.0196%" height="15" fill="rgb(249,199,1)" fg:x="10162" fg:w="2"/><text x="99.8384%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5884%" y="853" width="0.0196%" height="15" fill="rgb(240,85,17)" fg:x="10162" fg:w="2"/><text x="99.8384%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.5884%" y="837" width="0.0196%" height="15" fill="rgb(206,108,45)" fg:x="10162" fg:w="2"/><text x="99.8384%" y="847.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::Context&gt; (4 samples, 0.04%)</title><rect x="99.6374%" y="677" width="0.0392%" height="15" fill="rgb(245,210,41)" fg:x="10167" fg:w="4"/><text x="99.8874%" y="687.50"></text></g><g><title>core::ptr::drop_in_place&lt;tokio::runtime::scheduler::multi_thread::worker::Context&gt; (4 samples, 0.04%)</title><rect x="99.6374%" y="661" width="0.0392%" height="15" fill="rgb(206,13,37)" fg:x="10167" fg:w="4"/><text x="99.8874%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::sync::Arc&lt;tokio::runtime::scheduler::multi_thread::worker::Worker&gt;&gt; (4 samples, 0.04%)</title><rect x="99.6374%" y="645" width="0.0392%" height="15" fill="rgb(250,61,18)" fg:x="10167" fg:w="4"/><text x="99.8874%" y="655.50"></text></g><g><title>&lt;alloc::sync::Arc&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.04%)</title><rect x="99.6374%" y="629" width="0.0392%" height="15" fill="rgb(235,172,48)" fg:x="10167" fg:w="4"/><text x="99.8874%" y="639.50"></text></g><g><title>cfree (3 samples, 0.03%)</title><rect x="99.6472%" y="613" width="0.0294%" height="15" fill="rgb(249,201,17)" fg:x="10168" fg:w="3"/><text x="99.8972%" y="623.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="99.6472%" y="597" width="0.0294%" height="15" fill="rgb(219,208,6)" fg:x="10168" fg:w="3"/><text x="99.8972%" y="607.50"></text></g><g><title>std::sys::unix::time::Timespec::now (2 samples, 0.02%)</title><rect x="99.6766%" y="613" width="0.0196%" height="15" fill="rgb(248,31,23)" fg:x="10171" fg:w="2"/><text x="99.9266%" y="623.50"></text></g><g><title>clock_gettime (2 samples, 0.02%)</title><rect x="99.6766%" y="597" width="0.0196%" height="15" fill="rgb(245,15,42)" fg:x="10171" fg:w="2"/><text x="99.9266%" y="607.50"></text></g><g><title>__vdso_clock_gettime (2 samples, 0.02%)</title><rect x="99.6766%" y="581" width="0.0196%" height="15" fill="rgb(222,217,39)" fg:x="10171" fg:w="2"/><text x="99.9266%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::stats::Stats::start_processing_scheduled_tasks (3 samples, 0.03%)</title><rect x="99.6766%" y="629" width="0.0294%" height="15" fill="rgb(210,219,27)" fg:x="10171" fg:w="3"/><text x="99.9266%" y="639.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;tokio::runtime::scheduler::multi_thread::worker::Core&gt;&gt; (2 samples, 0.02%)</title><rect x="99.7060%" y="613" width="0.0196%" height="15" fill="rgb(252,166,36)" fg:x="10174" fg:w="2"/><text x="99.9560%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::&lt;impl tokio::runtime::scheduler::multi_thread::handle::Handle&gt;::shutdown_core (4 samples, 0.04%)</title><rect x="99.7060%" y="629" width="0.0392%" height="15" fill="rgb(245,132,34)" fg:x="10174" fg:w="4"/><text x="99.9560%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Parker::park (2 samples, 0.02%)</title><rect x="99.7452%" y="597" width="0.0196%" height="15" fill="rgb(236,54,3)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park (2 samples, 0.02%)</title><rect x="99.7452%" y="581" width="0.0196%" height="15" fill="rgb(241,173,43)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="591.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::park::Inner::park_condvar (2 samples, 0.02%)</title><rect x="99.7452%" y="565" width="0.0196%" height="15" fill="rgb(215,190,9)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="575.50"></text></g><g><title>tokio::loom::std::parking_lot::Condvar::wait (2 samples, 0.02%)</title><rect x="99.7452%" y="549" width="0.0196%" height="15" fill="rgb(242,101,16)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="559.50"></text></g><g><title>parking_lot::condvar::Condvar::wait (2 samples, 0.02%)</title><rect x="99.7452%" y="533" width="0.0196%" height="15" fill="rgb(223,190,21)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="543.50"></text></g><g><title>parking_lot::condvar::Condvar::wait_until_internal (2 samples, 0.02%)</title><rect x="99.7452%" y="517" width="0.0196%" height="15" fill="rgb(215,228,25)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="527.50"></text></g><g><title>parking_lot_core::parking_lot::park (2 samples, 0.02%)</title><rect x="99.7452%" y="501" width="0.0196%" height="15" fill="rgb(225,36,22)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="511.50"></text></g><g><title>parking_lot_core::parking_lot::with_thread_data (2 samples, 0.02%)</title><rect x="99.7452%" y="485" width="0.0196%" height="15" fill="rgb(251,106,46)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="495.50"></text></g><g><title>parking_lot_core::parking_lot::park::_{{closure}} (2 samples, 0.02%)</title><rect x="99.7452%" y="469" width="0.0196%" height="15" fill="rgb(208,90,1)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="479.50"></text></g><g><title>&lt;parking_lot_core::thread_parker::imp::ThreadParker as parking_lot_core::thread_parker::ThreadParkerT&gt;::park (2 samples, 0.02%)</title><rect x="99.7452%" y="453" width="0.0196%" height="15" fill="rgb(243,10,4)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="463.50"></text></g><g><title>parking_lot_core::thread_parker::imp::ThreadParker::futex_wait (2 samples, 0.02%)</title><rect x="99.7452%" y="437" width="0.0196%" height="15" fill="rgb(212,137,27)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="447.50"></text></g><g><title>syscall (2 samples, 0.02%)</title><rect x="99.7452%" y="421" width="0.0196%" height="15" fill="rgb(231,220,49)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.7452%" y="405" width="0.0196%" height="15" fill="rgb(237,96,20)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.7452%" y="389" width="0.0196%" height="15" fill="rgb(239,229,30)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="399.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.7452%" y="373" width="0.0196%" height="15" fill="rgb(219,65,33)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.7452%" y="357" width="0.0196%" height="15" fill="rgb(243,134,7)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="367.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.7452%" y="341" width="0.0196%" height="15" fill="rgb(216,177,54)" fg:x="10178" fg:w="2"/><text x="99.9952%" y="351.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park_timeout (3 samples, 0.03%)</title><rect x="99.7452%" y="613" width="0.0294%" height="15" fill="rgb(211,160,20)" fg:x="10178" fg:w="3"/><text x="99.9952%" y="623.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::idle::Idle::is_parked (2 samples, 0.02%)</title><rect x="99.7746%" y="597" width="0.0196%" height="15" fill="rgb(239,85,39)" fg:x="10181" fg:w="2"/><text x="100.0246%" y="607.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::park (6 samples, 0.06%)</title><rect x="99.7452%" y="629" width="0.0588%" height="15" fill="rgb(232,125,22)" fg:x="10178" fg:w="6"/><text x="99.9952%" y="639.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::transition_from_parked (3 samples, 0.03%)</title><rect x="99.7746%" y="613" width="0.0294%" height="15" fill="rgb(244,57,34)" fg:x="10181" fg:w="3"/><text x="100.0246%" y="623.50"></text></g><g><title>tokio::runtime::task::list::OwnedTasks&lt;S&gt;::close_and_shutdown_all (5 samples, 0.05%)</title><rect x="99.8040%" y="613" width="0.0490%" height="15" fill="rgb(214,203,32)" fg:x="10184" fg:w="5"/><text x="100.0540%" y="623.50"></text></g><g><title>tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::pop_back (5 samples, 0.05%)</title><rect x="99.8040%" y="597" width="0.0490%" height="15" fill="rgb(207,58,43)" fg:x="10184" fg:w="5"/><text x="100.0540%" y="607.50"></text></g><g><title>tokio::util::sharded_list::ShardedList&lt;L,&lt;L as tokio::util::linked_list::Link&gt;::Target&gt;::shard_inner (5 samples, 0.05%)</title><rect x="99.8040%" y="581" width="0.0490%" height="15" fill="rgb(215,193,15)" fg:x="10184" fg:w="5"/><text x="100.0540%" y="591.50"></text></g><g><title>tokio::loom::std::parking_lot::Mutex&lt;T&gt;::lock (5 samples, 0.05%)</title><rect x="99.8040%" y="565" width="0.0490%" height="15" fill="rgb(232,15,44)" fg:x="10184" fg:w="5"/><text x="100.0540%" y="575.50"></text></g><g><title>lock_api::mutex::Mutex&lt;R,T&gt;::lock (5 samples, 0.05%)</title><rect x="99.8040%" y="549" width="0.0490%" height="15" fill="rgb(212,3,48)" fg:x="10184" fg:w="5"/><text x="100.0540%" y="559.50"></text></g><g><title>&lt;parking_lot::raw_mutex::RawMutex as lock_api::mutex::RawMutex&gt;::lock (5 samples, 0.05%)</title><rect x="99.8040%" y="533" width="0.0490%" height="15" fill="rgb(218,128,7)" fg:x="10184" fg:w="5"/><text x="100.0540%" y="543.50"></text></g><g><title>parking_lot::raw_mutex::RawMutex::lock_slow (2 samples, 0.02%)</title><rect x="99.8334%" y="517" width="0.0196%" height="15" fill="rgb(226,216,39)" fg:x="10187" fg:w="2"/><text x="100.0834%" y="527.50"></text></g><g><title>tokio::loom::std::unsafe_cell::UnsafeCell&lt;T&gt;::with_mut (25 samples, 0.25%)</title><rect x="99.6178%" y="789" width="0.2450%" height="15" fill="rgb(243,47,51)" fg:x="10165" fg:w="25"/><text x="99.8678%" y="799.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll::_{{closure}} (25 samples, 0.25%)</title><rect x="99.6178%" y="773" width="0.2450%" height="15" fill="rgb(241,183,40)" fg:x="10165" fg:w="25"/><text x="99.8678%" y="783.50"></text></g><g><title>&lt;tokio::runtime::blocking::task::BlockingTask&lt;T&gt; as core::future::future::Future&gt;::poll (25 samples, 0.25%)</title><rect x="99.6178%" y="757" width="0.2450%" height="15" fill="rgb(231,217,32)" fg:x="10165" fg:w="25"/><text x="99.8678%" y="767.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Launch::launch::_{{closure}} (25 samples, 0.25%)</title><rect x="99.6178%" y="741" width="0.2450%" height="15" fill="rgb(229,61,38)" fg:x="10165" fg:w="25"/><text x="99.8678%" y="751.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run (25 samples, 0.25%)</title><rect x="99.6178%" y="725" width="0.2450%" height="15" fill="rgb(225,210,5)" fg:x="10165" fg:w="25"/><text x="99.8678%" y="735.50"></text></g><g><title>tokio::runtime::context::runtime::enter_runtime (25 samples, 0.25%)</title><rect x="99.6178%" y="709" width="0.2450%" height="15" fill="rgb(231,79,45)" fg:x="10165" fg:w="25"/><text x="99.8678%" y="719.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}} (23 samples, 0.23%)</title><rect x="99.6374%" y="693" width="0.2254%" height="15" fill="rgb(224,100,7)" fg:x="10167" fg:w="23"/><text x="99.8874%" y="703.50"></text></g><g><title>tokio::runtime::context::scoped::Scoped&lt;T&gt;::set (19 samples, 0.19%)</title><rect x="99.6766%" y="677" width="0.1862%" height="15" fill="rgb(241,198,18)" fg:x="10171" fg:w="19"/><text x="99.9266%" y="687.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::run::_{{closure}}::_{{closure}} (19 samples, 0.19%)</title><rect x="99.6766%" y="661" width="0.1862%" height="15" fill="rgb(252,97,53)" fg:x="10171" fg:w="19"/><text x="99.9266%" y="671.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Context::run (19 samples, 0.19%)</title><rect x="99.6766%" y="645" width="0.1862%" height="15" fill="rgb(220,88,7)" fg:x="10171" fg:w="19"/><text x="99.9266%" y="655.50"></text></g><g><title>tokio::runtime::scheduler::multi_thread::worker::Core::pre_shutdown (6 samples, 0.06%)</title><rect x="99.8040%" y="629" width="0.0588%" height="15" fill="rgb(213,176,14)" fg:x="10184" fg:w="6"/><text x="100.0540%" y="639.50"></text></g><g><title>std::panic::catch_unwind (41 samples, 0.40%)</title><rect x="99.4806%" y="1109" width="0.4018%" height="15" fill="rgb(246,73,7)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1119.50"></text></g><g><title>std::panicking::try (41 samples, 0.40%)</title><rect x="99.4806%" y="1093" width="0.4018%" height="15" fill="rgb(245,64,36)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1103.50"></text></g><g><title>std::panicking::try::do_call (41 samples, 0.40%)</title><rect x="99.4806%" y="1077" width="0.4018%" height="15" fill="rgb(245,80,10)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1087.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (41 samples, 0.40%)</title><rect x="99.4806%" y="1061" width="0.4018%" height="15" fill="rgb(232,107,50)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1071.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}}::_{{closure}} (41 samples, 0.40%)</title><rect x="99.4806%" y="1045" width="0.4018%" height="15" fill="rgb(253,3,0)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1055.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (41 samples, 0.40%)</title><rect x="99.4806%" y="1029" width="0.4018%" height="15" fill="rgb(212,99,53)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1039.50"></text></g><g><title>tokio::runtime::blocking::pool::Spawner::spawn_thread::_{{closure}} (41 samples, 0.40%)</title><rect x="99.4806%" y="1013" width="0.4018%" height="15" fill="rgb(249,111,54)" fg:x="10151" fg:w="41"/><text x="99.7306%" y="1023.50"></text></g><g><title>tokio::runtime::blocking::pool::Inner::run (38 samples, 0.37%)</title><rect x="99.5100%" y="997" width="0.3724%" height="15" fill="rgb(249,55,30)" fg:x="10154" fg:w="38"/><text x="99.7600%" y="1007.50"></text></g><g><title>tokio::runtime::blocking::pool::Task::run (28 samples, 0.27%)</title><rect x="99.6080%" y="981" width="0.2744%" height="15" fill="rgb(237,47,42)" fg:x="10164" fg:w="28"/><text x="99.8580%" y="991.50"></text></g><g><title>tokio::runtime::task::UnownedTask&lt;S&gt;::run (28 samples, 0.27%)</title><rect x="99.6080%" y="965" width="0.2744%" height="15" fill="rgb(211,20,18)" fg:x="10164" fg:w="28"/><text x="99.8580%" y="975.50"></text></g><g><title>tokio::runtime::task::raw::RawTask::poll (27 samples, 0.26%)</title><rect x="99.6178%" y="949" width="0.2646%" height="15" fill="rgb(231,203,46)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="959.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll (27 samples, 0.26%)</title><rect x="99.6178%" y="933" width="0.2646%" height="15" fill="rgb(237,142,3)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="943.50"></text></g><g><title>tokio::runtime::task::harness::Harness&lt;T,S&gt;::poll_inner (27 samples, 0.26%)</title><rect x="99.6178%" y="917" width="0.2646%" height="15" fill="rgb(241,107,1)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="927.50"></text></g><g><title>tokio::runtime::task::harness::poll_future (27 samples, 0.26%)</title><rect x="99.6178%" y="901" width="0.2646%" height="15" fill="rgb(229,83,13)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="911.50"></text></g><g><title>std::panic::catch_unwind (27 samples, 0.26%)</title><rect x="99.6178%" y="885" width="0.2646%" height="15" fill="rgb(241,91,40)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="895.50"></text></g><g><title>std::panicking::try (27 samples, 0.26%)</title><rect x="99.6178%" y="869" width="0.2646%" height="15" fill="rgb(225,3,45)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="879.50"></text></g><g><title>std::panicking::try::do_call (27 samples, 0.26%)</title><rect x="99.6178%" y="853" width="0.2646%" height="15" fill="rgb(244,223,14)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="863.50"></text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (27 samples, 0.26%)</title><rect x="99.6178%" y="837" width="0.2646%" height="15" fill="rgb(224,124,37)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="847.50"></text></g><g><title>tokio::runtime::task::harness::poll_future::_{{closure}} (27 samples, 0.26%)</title><rect x="99.6178%" y="821" width="0.2646%" height="15" fill="rgb(251,171,30)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="831.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::poll (27 samples, 0.26%)</title><rect x="99.6178%" y="805" width="0.2646%" height="15" fill="rgb(236,46,54)" fg:x="10165" fg:w="27"/><text x="99.8678%" y="815.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::drop_future_or_output (2 samples, 0.02%)</title><rect x="99.8628%" y="789" width="0.0196%" height="15" fill="rgb(245,213,5)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="799.50"></text></g><g><title>tokio::runtime::task::core::Core&lt;T,S&gt;::set_stage (2 samples, 0.02%)</title><rect x="99.8628%" y="773" width="0.0196%" height="15" fill="rgb(230,144,27)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="783.50"></text></g><g><title>tokio::runtime::task::core::TaskIdGuard::enter (2 samples, 0.02%)</title><rect x="99.8628%" y="757" width="0.0196%" height="15" fill="rgb(220,86,6)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="767.50"></text></g><g><title>tokio::runtime::context::set_current_task_id (2 samples, 0.02%)</title><rect x="99.8628%" y="741" width="0.0196%" height="15" fill="rgb(240,20,13)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="751.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (2 samples, 0.02%)</title><rect x="99.8628%" y="725" width="0.0196%" height="15" fill="rgb(217,89,34)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="735.50"></text></g><g><title>tokio::runtime::context::CONTEXT::__getit (2 samples, 0.02%)</title><rect x="99.8628%" y="709" width="0.0196%" height="15" fill="rgb(229,13,5)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="719.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::get (2 samples, 0.02%)</title><rect x="99.8628%" y="693" width="0.0196%" height="15" fill="rgb(244,67,35)" fg:x="10190" fg:w="2"/><text x="100.1128%" y="703.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="99.8824%" y="1029" width="0.0294%" height="15" fill="rgb(221,40,2)" fg:x="10192" fg:w="3"/><text x="100.1324%" y="1039.50"></text></g><g><title>malloc (4 samples, 0.04%)</title><rect x="99.8824%" y="1077" width="0.0392%" height="15" fill="rgb(237,157,21)" fg:x="10192" fg:w="4"/><text x="100.1324%" y="1087.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="99.8824%" y="1061" width="0.0392%" height="15" fill="rgb(222,94,11)" fg:x="10192" fg:w="4"/><text x="100.1324%" y="1071.50"></text></g><g><title>[libc.so.6] (4 samples, 0.04%)</title><rect x="99.8824%" y="1045" width="0.0392%" height="15" fill="rgb(249,113,6)" fg:x="10192" fg:w="4"/><text x="100.1324%" y="1055.50"></text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (50 samples, 0.49%)</title><rect x="99.4708%" y="1141" width="0.4900%" height="15" fill="rgb(238,137,36)" fg:x="10150" fg:w="50"/><text x="99.7208%" y="1151.50"></text></g><g><title>std::thread::Builder::spawn_unchecked_::_{{closure}} (50 samples, 0.49%)</title><rect x="99.4708%" y="1125" width="0.4900%" height="15" fill="rgb(210,102,26)" fg:x="10150" fg:w="50"/><text x="99.7208%" y="1135.50"></text></g><g><title>std::sys::unix::thread::guard::current (8 samples, 0.08%)</title><rect x="99.8824%" y="1109" width="0.0784%" height="15" fill="rgb(218,30,30)" fg:x="10192" fg:w="8"/><text x="100.1324%" y="1119.50"></text></g><g><title>pthread_getattr_np (8 samples, 0.08%)</title><rect x="99.8824%" y="1093" width="0.0784%" height="15" fill="rgb(214,67,26)" fg:x="10192" fg:w="8"/><text x="100.1324%" y="1103.50"></text></g><g><title>pthread_getaffinity_np (4 samples, 0.04%)</title><rect x="99.9216%" y="1077" width="0.0392%" height="15" fill="rgb(251,9,53)" fg:x="10196" fg:w="4"/><text x="100.1716%" y="1087.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9314%" y="1061" width="0.0294%" height="15" fill="rgb(228,204,25)" fg:x="10197" fg:w="3"/><text x="100.1814%" y="1071.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9314%" y="1045" width="0.0294%" height="15" fill="rgb(207,153,8)" fg:x="10197" fg:w="3"/><text x="100.1814%" y="1055.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9314%" y="1029" width="0.0294%" height="15" fill="rgb(242,9,16)" fg:x="10197" fg:w="3"/><text x="100.1814%" y="1039.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9314%" y="1013" width="0.0294%" height="15" fill="rgb(217,211,10)" fg:x="10197" fg:w="3"/><text x="100.1814%" y="1023.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9314%" y="997" width="0.0294%" height="15" fill="rgb(219,228,52)" fg:x="10197" fg:w="3"/><text x="100.1814%" y="1007.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="99.9412%" y="981" width="0.0196%" height="15" fill="rgb(231,92,29)" fg:x="10198" fg:w="2"/><text x="100.1912%" y="991.50"></text></g><g><title>all (10,204 samples, 100%)</title><rect x="0.0000%" y="1221" width="100.0000%" height="15" fill="rgb(232,8,23)" fg:x="0" fg:w="10204"/><text x="0.2500%" y="1231.50"></text></g><g><title>tokio-runtime-w (83 samples, 0.81%)</title><rect x="99.1866%" y="1205" width="0.8134%" height="15" fill="rgb(216,211,34)" fg:x="10121" fg:w="83"/><text x="99.4366%" y="1215.50"></text></g><g><title>[libc.so.6] (82 samples, 0.80%)</title><rect x="99.1964%" y="1189" width="0.8036%" height="15" fill="rgb(236,151,0)" fg:x="10122" fg:w="82"/><text x="99.4464%" y="1199.50"></text></g><g><title>[libc.so.6] (82 samples, 0.80%)</title><rect x="99.1964%" y="1173" width="0.8036%" height="15" fill="rgb(209,168,3)" fg:x="10122" fg:w="82"/><text x="99.4464%" y="1183.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (61 samples, 0.60%)</title><rect x="99.4022%" y="1157" width="0.5978%" height="15" fill="rgb(208,129,28)" fg:x="10143" fg:w="61"/><text x="99.6522%" y="1167.50"></text></g><g><title>sigaltstack (4 samples, 0.04%)</title><rect x="99.9608%" y="1141" width="0.0392%" height="15" fill="rgb(229,78,22)" fg:x="10200" fg:w="4"/><text x="100.2108%" y="1151.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.9608%" y="1125" width="0.0392%" height="15" fill="rgb(228,187,13)" fg:x="10200" fg:w="4"/><text x="100.2108%" y="1135.50"></text></g><g><title>[unknown] (4 samples, 0.04%)</title><rect x="99.9608%" y="1109" width="0.0392%" height="15" fill="rgb(240,119,24)" fg:x="10200" fg:w="4"/><text x="100.2108%" y="1119.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9706%" y="1093" width="0.0294%" height="15" fill="rgb(209,194,42)" fg:x="10201" fg:w="3"/><text x="100.2206%" y="1103.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="99.9706%" y="1077" width="0.0294%" height="15" fill="rgb(247,200,46)" fg:x="10201" fg:w="3"/><text x="100.2206%" y="1087.50"></text></g></svg></svg>